#############################################################################
# Dockable probe macros highly inspired from https://github.com/jlas1/Klicky-Probe
# Reworked by Elpopo and myself to simplify it while trying to stay generic
#############################################################################

[gcode_macro _PROBE_VARIABLES]
variable_probe_attached: False
variable_probe_state: False
variable_probe_lock: False
gcode:

[gcode_macro _EXIT_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    {% set move  = params.MOVE|default(0) %}
    {% set speed  = params.MOVE_SPEED|default(0) %}
    M400 # mandatory to save the new safe position
    RESTORE_GCODE_STATE NAME={function} MOVE={move} MOVE_SPEED={speed}

[gcode_macro _ENTRY_POINT]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION %}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME={function}
    # all the macros initially assume absolute positioning
    G90

[gcode_macro _HOMING_VARIABLES]
gcode:
    {% set Reset  = params.RESET|default(0)  %}
    {% if Reset %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    {% endif %}


[gcode_macro ATTACH_PROBE_LOCK]
description: Attaches probe, can only be docked after unlocking
gcode:
    ATTACH_PROBE
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }

[gcode_macro DOCK_PROBE_UNLOCK]
description: Docks probe even if it was locked
gcode:
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    DOCK_PROBE

[gcode_macro PROBE_UNLOCK]
description: Unlocks probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }

[gcode_macro PROBE_LOCK]
description: Locks probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }


[gcode_macro ATTACH_PROBE]
description: Attaches probe
gcode:
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # Get Docking location
    {% set probe_dock_location_x, probe_dock_location_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_location_xy|map('float') %}

    {% set probe_before_attach_position = printer["gcode_macro _USER_VARIABLES"].probe_before_attach_position|string %}
    {% set probe_after_attach_position = printer["gcode_macro _USER_VARIABLES"].probe_after_attach_position|string %}
    {% set probe_move_attach_length = printer["gcode_macro _USER_VARIABLES"].probe_move_attach_length %}

    # Safe Z for travel
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}

    # Set speed
    {% set probe_dock_speed = printer["gcode_macro _USER_VARIABLES"].probe_dock_speed * 60 %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    _ENTRY_POINT FUNCTION=ATTACH_PROBE

    # if x and y are not homed
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }

    # If probe not attached and locked
    {% elif not probe_attached and not probe_lock %}
        {% if verbose %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        
        # Move to safe Z
        {% if (printer.toolhead.position.z < probe_min_z_travel) %}
            {% if verbose %}
                { action_respond_info("Moving to a safe Z distance") }
            {% endif %}
            G0 Z{probe_min_z_travel} F{z_drop_speed}
        {% endif %}

        # Probe entry location
        {% if probe_before_attach_position == 'left' %}
            G1 X{probe_dock_location_x - probe_move_attach_length} Y{probe_dock_location_y} F{travel_speed}
        {% elif probe_before_attach_position == 'right' %}
            G1 X{probe_dock_location_x + probe_move_attach_length} Y{probe_dock_location_y} F{travel_speed}
        {% elif probe_before_attach_position == 'front' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y - probe_move_attach_length} F{travel_speed}
        {% elif probe_before_attach_position == 'back' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y + probe_move_attach_length} F{travel_speed}
        {% else %}
            { action_raise_error("variable_probe_before_attach_position is incorrectly set!") }
        {% endif %}
        
        # Pickup from Probe location
        G1 X{probe_dock_location_x} Y{probe_dock_location_y} F{probe_dock_speed}
        
        # Get the probe out of the dock
        {% if probe_after_attach_position == 'left' %}
            G1 X{probe_dock_location_x - probe_move_attach_length} Y{probe_dock_location_y} F{probe_dock_speed}
        {% elif probe_after_attach_position == 'right' %}
            G1 X{probe_dock_location_x + probe_move_attach_length} Y{probe_dock_location_y} F{probe_dock_speed}
        {% elif probe_after_attach_position == 'front' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y - probe_move_attach_length} F{probe_dock_speed}
        {% elif probe_after_attach_position == 'back' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y + probe_move_attach_length} F{probe_dock_speed}
        {% else %}
            { action_raise_error("variable_probe_after_attach_position is incorrectly set!") }
        {% endif %}

        _CHECK_PROBE action=attach

    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        _CHECK_PROBE action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        _CHECK_PROBE action=query

    {% endif %}
    _EXIT_POINT FUNCTION=ATTACH_PROBE


[gcode_macro DOCK_PROBE]
description: Docks probe
gcode:
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # Get Docking location
    {% set probe_dock_location_x, probe_dock_location_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_location_xy|map('float') %}
    
    {% set probe_before_dock_position = printer["gcode_macro _USER_VARIABLES"].probe_before_dock_position|string %}
    {% set probe_after_dock_position = printer["gcode_macro _USER_VARIABLES"].probe_after_dock_position|string %}
    {% set probe_move_dock_length = printer["gcode_macro _USER_VARIABLES"].probe_move_dock_length %}

    # Safe Z for travel
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}

    # Set speed
    {% set probe_dock_speed = printer["gcode_macro _USER_VARIABLES"].probe_dock_speed * 60 %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    _ENTRY_POINT FUNCTION=DOCK_PROBE

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }

    # If probe not attached and not locked
    {% elif probe_attached and not probe_lock %}
        {% if verbose %}
            { action_respond_info("Docking Probe") }
        {% endif %}

        # Move to safe Z
        {% if (printer.toolhead.position.z < probe_min_z_travel) %}
            {% if verbose %}
                { action_respond_info("Moving to a safe Z distance") }
            {% endif %}
            G0 Z{probe_min_z_travel} F{z_drop_speed}
        {% endif %}

        # Probe entry location
        {% if probe_before_dock_position == 'left' %}
            G1 X{probe_dock_location_x - probe_move_dock_length} Y{probe_dock_location_y} F{travel_speed}
        {% elif probe_before_dock_position == 'right' %}
            G1 X{probe_dock_location_x + probe_move_dock_length} Y{probe_dock_location_y} F{travel_speed}
        {% elif probe_before_dock_position == 'front' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y - probe_move_dock_length} F{travel_speed}
        {% elif probe_before_dock_position == 'back' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y + probe_move_dock_length} F{travel_speed}
        {% else %}
            { action_raise_error("variable_probe_before_dock_position is incorrectly set!") }
        {% endif %}
        
        # Drop Probe to Probe location
        G1 X{probe_dock_location_x} Y{probe_dock_location_y} F{probe_dock_speed}
        
        # Get the probe out of the dock
        {% if probe_after_dock_position == 'left' %}
            G1 X{probe_dock_location_x - probe_move_dock_length} Y{probe_dock_location_y} F{probe_dock_speed}
        {% elif probe_after_dock_position == 'right' %}
            G1 X{probe_dock_location_x + probe_move_dock_length} Y{probe_dock_location_y} F{probe_dock_speed}
        {% elif probe_after_dock_position == 'front' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y - probe_move_dock_length} F{probe_dock_speed}
        {% elif probe_after_dock_position == 'back' %}
            G1 X{probe_dock_location_x} Y{probe_dock_location_y + probe_move_dock_length} F{probe_dock_speed}
        {% else %}
            { action_raise_error("variable_probe_after_dock_position is incorrectly set!") }
        {% endif %}

        G4 P500
        _CHECK_PROBE action=dock

    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        _CHECK_PROBE action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        _CHECK_PROBE action=query

    {% endif %}
    _EXIT_POINT FUNCTION=DOCK_PROBE


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CHECK_PROBE]
variable_probe_state: 0
gcode:
    Query_Probe
    _SET_PROBE_STATE action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SET_PROBE_STATE]
gcode:
    {% set probe_last_query = printer.probe.last_query %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # If triggered (true), probe not attached
    {% if probe_last_query %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_state VALUE={ probe_last_query }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not probe_last_query and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if probe_last_query and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}
