# Homing Override for dockable probe
[homing_override]
axes: xyz
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set homing_zhop = printer["gcode_macro _USER_VARIABLES"].homing_zhop|float %}
    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed * 60 %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    _CHECK_PROBE action=query

    # reset parameters
    {% set X, Y, Z = False, False, False %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set X, Y, Z = True, True, True %}

    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}

        {% if 'X' in params
          and 'Y' in params
          and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _HOMING_VARIABLES reset=1
         {% endif %}

    {% endif %}

    _ENTRY_POINT FUNCTION=homing_override
    BED_MESH_CLEAR
    G90

    {% if Z %}
        {% if ('z' in printer.toolhead.homed_axes) %}
            {% if (printer.toolhead.position.z < homing_zhop) %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP") }
                {% endif %}
                G0 Z{homing_zhop} F{z_drop_speed}
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("Z not homed, forcing full G28") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{homing_zhop} F{z_drop_speed}
            {% set X, Y, Z = True, True, True %}
        {% endif %}
    {% endif %}

    # Home x
    {% if X %}
        {% if verbose %}
            { action_respond_info("Homing X") }
        {% endif %}
        G28 X0
    {% endif %}

    # Home y
    {% if Y %}
        {% if verbose %}
            { action_respond_info("Homing Y") }
        {% endif %}
        G28 Y0
    {% endif %}

    # Home z
    {% if Z %}
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}
        _GOTO_Z_PROBE
        G28 Z0
        G0 Z{homing_zhop} F{z_drop_speed}

    {% endif %}
    _CHECK_PROBE action=query

    _EXIT_POINT FUNCTION=homing_override



[gcode_macro _GOTO_Z_PROBE]
description: Move to z probe avoiding the probe dock
gcode:
    # If the auto z calibration plugin is enabled, then we use the z endstop coordinates set in its config section [z_calibration]
    # Else we fall back on the variable_zendstop_position set in the variables.cfg file
    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES"].zcalib_plugin_enabled %}
    {% if zcalib_plugin_enabled %}
        {% set z_endstop_x, z_endstop_y = printer["configfile"].config["z_calibration"]["nozzle_xy_position"].split(',')|map('trim')|map('float') %}  
    {% else %}
        {% set z_endstop_x, z_endstop_y = printer["gcode_macro _USER_VARIABLES"].zendstop_position|map('float') %}  
    {% endif %}

    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed|float * 60 %}

    {% set probe_dock_location_x, probe_dock_location_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_location_xy|map('float') %}
    {% set probe_dock_margin_x, probe_dock_margin_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_margin_xy|map('float') %}

    {% set current_x = printer.toolhead.position.x|float %}
    {% set current_y = printer.toolhead.position.y|float %}

    SAVE_GCODE_STATE NAME=goto_ZProbe
    G90
    
    # check if toolhead have to avoid the dock
    {% set avoid_dock = false %}
    {% if probe_dock_location_x < z_endstop_x|float %}
        #dock on left
        #toolhead on right of dock ?
        {% if current_x < (probe_dock_location_x + probe_dock_margin_x)  %}
            {% set avoid_dock = true %}
        {% endif %} 
    {% else %}
        #dock on right
        #toolhead on left of dock ?
        {% if current_x > (probe_dock_location_x - probe_dock_margin_x)  %}
            {% set avoid_dock = true %}
        {% endif %} 
    {% endif %} 


    {% if avoid_dock == true  %}
        # avoid Y
        G0 Y{probe_dock_location_y - probe_dock_margin_y} F{homing_travel_speed}
        #go z endstop X
        G0 X{z_endstop_x} F{homing_travel_speed}
    {% endif %} 
    
    G0 X{z_endstop_x} Y{z_endstop_y} F{homing_travel_speed}
    
    RESTORE_GCODE_STATE NAME=goto_ZProbe
