# This is a placeholder to add all the config checks
# and inits process used in Klippain

[delayed_gcode KLIPPAIN_STARTUP]
initial_duration: 1
gcode:
    _KLIPPAIN_STARTUP


[gcode_macro _KLIPPAIN_STARTUP]
gcode:
    ## Set boot logo
    {% if printer["gcode_macro _USER_VARIABLES"].minidisplay_bootlogo_enabled %}
        _INIT_BOOT_LOGO
    {% endif %}

    # Print system information using the system_info.py script to log them in the klippy.log
    RUN_SHELL_COMMAND CMD=system_info

    # Dump the MCU version to the console for the Klippy log
    _INIT_MCU_VER

    # Check if there is an extruder set
    {% set extruder_enabled = printer["gcode_macro _USER_VARIABLES"].extruder_enabled %}
    {% if not extruder_enabled %}
        { action_raise_error("Klippain need to have an extruder defined to work properly. Check your printer.cfg includes!") }
    {% endif %}

    # Check the probe configuration and compatibility with current includes
    _INIT_CHECKPROBECONF

    # If an MMU/ERCF is included in Klippain, we also check that the correct HH version is installed
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set klippain_ercf_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_ercf_enabled %}
    {% if klippain_mmu_enabled or klippain_ercf_enabled %}
        _INIT_CHECK_MMU
    {% endif %}

    ## Set the startup status LED
    _INIT_LEDS

    # User custom startup process. Define them in your overrides.cfg if needed :)
    _INIT_USERCUSTOM

    {% if klippain_mmu_enabled %}
        RESPOND MSG="Klippain with Happy_Hare v{printer.configfile.settings.mmu.happy_hare_version} MMU support started and ready!"
    {% else %}
        RESPOND MSG="Klippain started and ready!"
    {% endif %}


[gcode_macro _INIT_LEDS]
gcode:
    {% if printer["gcode_macro _USER_VARIABLES"].status_leds_enabled or printer["gcode_macro _USER_VARIABLES"].status_leds_caselight_enabled %}
        {% if printer["gcode_macro _USER_VARIABLES"].caselight_on_at_startup|default(False) %}
            STATUS_LEDS COLOR="READY"
        {% else %}
            STATUS_LEDS COLOR="OFF"
        {% endif %}
    {% endif %}


[gcode_macro _INIT_CHECKPROBECONF]
gcode:
    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled|string %}
    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES"].zcalib_plugin_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set qgl_enabled = printer["gcode_macro _USER_VARIABLES"].qgl_enabled %}
    {% set ztilt_enabled = printer["gcode_macro _USER_VARIABLES"].ztilt_enabled %}

    {% if zcalib_plugin_enabled %}
        {% if probe_type_enabled == "vorontap" %}
            { action_raise_error("Voron TAP Probe and Z calibration plugin cannot be used at the same time in Klippain!") }
        {% elif probe_type_enabled == "bltouch" %}
            { action_raise_error("BLTouch Probe and Z calibration plugin cannot be used at the same time in Klippain!") }
        {% elif probe_type_enabled == "inductive" %}
            { action_raise_error("Inductive probe and Z calibration plugin cannot be used at the same time in Klippain!") }
        {% elif probe_type_enabled == "dockable_virtual" or probe_type_enabled == "inductive_virtual" %}
            { action_raise_error("Virtual Z endstop probes are not compatible with the Z calibration plugin!") }
        {% elif probe_type_enabled == "none" %}
            { action_raise_error("You need a probe to use the Z calibration plugin in Klippain!") }
        {% endif %}
    {% endif %}

    {% if bed_mesh_enabled and probe_type_enabled == "none" %}
        { action_raise_error("You need a to define a probe to be able to perform a bed mesh in Klippain!") }
    {% endif %}

    {% if qgl_enabled and probe_type_enabled == "none" %}
        { action_raise_error("You need a to define a probe to be able to perform a quad gantry leveling in Klippain!") }
    {% endif %}

    {% if ztilt_enabled and probe_type_enabled == "none" %}
        { action_raise_error("You need a to define a probe to be able to perform a Z tilt adjust in Klippain!") }
    {% endif %}


[gcode_macro _INIT_MCU_VER]
gcode:
    {% set parameters = namespace(output = 'Currently configured MCU(s): \n') %}
    {% for name1 in printer %}
        {% for name2 in printer[name1] %}
        {% set show = ['mcu_version'] %}
        {% if name2 is in show %}
            {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
            {% set parameters.output = parameters.output +  param + "\n" %}
        {% endif %}
        {% endfor %}
    {% endfor %}
    {action_respond_info(parameters.output)}


[gcode_macro _INIT_CHECK_MMU]
gcode:
    {% if printer.mmu is not defined %}
        {% if printer.ercf is not defined %}
            { action_raise_error("MMU support is enabled in Klippain, but HappyHare, the supported MMU/ERCF backend software is not detected. See the corresponding documentation: https://github.com/Frix-x/klippain/blob/main/docs/mmu.md") }
        {% else %}
            { action_raise_error("ERCF support is enabled in Klippain, but the old version of version of HappyHare (ie. ERCF-Software-V3) is installed. Please uninstall it and install the latest HappyHare instead. See the corresponding documentation: https://github.com/Frix-x/klippain/blob/main/docs/mmu.md") }
        {% endif %}
    {% else %}
        {% if printer.configfile.settings.mmu.happy_hare_version >= 2.5 %}      ### _MMU_SEQUENCE_VARS overrides for HH v2.5 and higher
            RESPOND MSG="The park_xy, travel_speed and lift_speed MMU's variables has been overrides to use Klippain ones!"
    #        RESPOND MSG="The park_xy, park_z_hop, travel_speed and lift_speed MMU's variables has been overridden to use Klippain ones!"
            {% set Px, Py = printer["gcode_macro _USER_VARIABLES"].park_position_xy|map('int') %}
            SET_GCODE_VARIABLE MACRO=_MMU_SEQUENCE_VARS VARIABLE=park_xy VALUE={Px},{Py}
    #        SET_GCODE_VARIABLE MACRO=_MMU_SEQUENCE_VARS VARIABLE=park_z_hop VALUE={printer["gcode_macro _USER_VARIABLES"].park_lift_z}
            SET_GCODE_VARIABLE MACRO=_MMU_SEQUENCE_VARS VARIABLE=travel_speed VALUE={printer["gcode_macro _USER_VARIABLES"].travel_speed}
            SET_GCODE_VARIABLE MACRO=_MMU_SEQUENCE_VARS VARIABLE=lift_speed VALUE={printer["gcode_macro _USER_VARIABLES"].z_drop_speed}
            _MMU_RUN_MARKERS
        {% elif printer.configfile.settings.mmu.happy_hare_version < 2.5 %}
            RESPOND PREFIX='Warning:' MSG="<span class="warning"--text> HappyHare <2.5 detected! Your version is deprecated in Klippain and its support will be dropped in the near future. Please update to HappyHare v2.5+</span>"
            {% if printer['gcode_macro _USER_VARIABLES'].mmu_force_homing_in_start_print is not defined or printer['gcode_macro _USER_VARIABLES'].mmu_unload_on_cancel_print is not defined or printer['gcode_macro _USER_VARIABLES'].mmu_unload_on_end_print is not defined or printer['gcode_macro _USER_VARIABLES'].mmu_check_gates_on_start_print is not defined or printer['gcode_macro _USER_VARIABLES'].mmu_check_errors_on_start_print is not defined %}
                { action_raise_error("MMU support is enabled in Klippain, but some variables are missing from your variables.cfg. Please update your template or refer to the corresponding documentation: https://github.com/Frix-x/klippain/blob/main/docs/mmu.md") }
            {% elif printer["gcode_macro _USER_VARIABLES"].mmu_check_errors_on_start_print and printer.mmu.print_start_detection|int == 1 %}
                RESPOND MSG="The HappyHare function to automatically detect the start and end of a print has been automatically disabled to allow early detection of an error during the Klippain START_PRINT sequence. This allow a more efficient debugging of the MMU. Refer to the <a href="https://github.com/Frix-x/klippain/blob/main/docs/mmu.md">Klippain MMU documentation</a>"
                MMU_TEST_CONFIG print_start_detection=0 # Override this value to disable the HappyHare auto detection of start and end of print in order to call _MMU_PRINT_START and _MMU_PRINT_END manually
            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _INIT_USERCUSTOM]
gcode:
    # ---- CUSTOM Macro section
    # this section is reserved for personal customized user startup
    # in order to use this, create a new macro in your overrides.cfg
    # [gcode_macro _INIT_USERCUSTOM]
    # gcode:
    #   ## Your custom code here
