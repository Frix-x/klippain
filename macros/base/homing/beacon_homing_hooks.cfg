[gcode_macro _HOME_PRE_AXIS]
description: Perform actions prior to homing an axis
gcode:
    {% set axis = params.AXIS %}
    {% set kinematics = printer['configfile'].config['printer']['kinematics'] %}
    {% set homing_travel_accel = printer['gcode_macro _USER_VARIABLES'].homing_travel_accel %}
    {% set sensorless_homing_enabled = printer['gcode_macro _USER_VARIABLES'].sensorless_homing_enabled %}
    {% set sensorless_current_factor = printer['gcode_macro _USER_VARIABLES'].sensorless_current_factor / 100 %}

    {% set x_driver = printer["gcode_macro _USER_VARIABLES"].x_driver %}
    {% set y_driver = printer["gcode_macro _USER_VARIABLES"].y_driver %}
    {% set z_driver = printer["gcode_macro _USER_VARIABLES"].z_driver %}
    {% set old_current_x = printer.configfile.config[x_driver ~ ' stepper_x'].run_current|float %}
    {% set old_current_y = printer.configfile.config[y_driver ~ ' stepper_y'].run_current|float %}
    {% set old_current_z = printer.configfile.config[z_driver ~ ' stepper_z'].run_current|float %}
    {% set new_current_x = sensorless_current_factor * old_current_x %}
    {% set new_current_y = sensorless_current_factor * old_current_y %}
    {% set new_current_z = sensorless_current_factor * old_current_z %}

    # reset parameters
    {% set X, Y = False, False %}

    # which axis has been requested for homing
    {% if axis == 'X' %}
        {% set X = True %}
    {% elif axis == 'Y' %}
        {% set Y = True %}
    {% endif %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR='HOMING'
    {% endif %}

    # Set the homing acceleration prior to any movement
    SET_GCODE_VARIABLE MACRO=_HOME_PRE_AXIS VARIABLE=saved_accel VALUE={printer.toolhead.max_accel}
    M204 S{homing_travel_accel}

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    G90

    {% if sensorless_homing_enabled %}
        {% if kinematics == 'corexy' %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={new_current_x}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={new_current_y}
            M400
        {% elif kinematics == 'corexz' %}
            {% if X %}
                SET_TMC_CURRENT STEPPER=stepper_x CURRENT={old_current_x}
                SET_TMC_CURRENT STEPPER=stepper_z CURRENT={old_current_z}
            {% elif Y %}
                SET_TMC_CURRENT STEPPER=stepper_y CURRENT={old_current_y}
            {% endif %}
            M400
        {% elif kinematics == 'cartesian' %}
            {% if X %}
                SET_TMC_CURRENT STEPPER=stepper_x CURRENT={new_current_x}
            {% elif Y %}
                SET_TMC_CURRENT STEPPER=stepper_x CURRENT={new_current_y}
            {% endif %}
            M400
        {% endif %}
    {% endif %}

    {% if verbose %}
        { action_respond_info('Homing %s' % axis) }
    {% endif %}

[gcode_macro _HOME_POST_AXIS]
description: Perform actions after homing an axis
gcode:
    {% set axis = params.AXIS %}
    {% set kinematics = printer['configfile'].config['printer']['kinematics'] %}
    {% set sensorless_homing_enabled = printer['gcode_macro _USER_VARIABLES'].sensorless_homing_enabled %}
    {% set sensorless_current_factor = printer['gcode_macro _USER_VARIABLES'].sensorless_current_factor / 100 %}
    {% set homing_travel_speed = printer['gcode_macro _USER_VARIABLES'].homing_travel_speed * 60 %}

    {% set x_homing_backoff, y_homing_backoff = printer['gcode_macro _USER_VARIABLES'].homing_backoff_distance_xy|map('float') %}

    {% set x_position_endstop = printer['configfile'].config['stepper_x']['position_endstop']|float %}
    {% set y_position_endstop = printer['configfile'].config['stepper_y']['position_endstop']|float %}

    {% set x_driver = printer["gcode_macro _USER_VARIABLES"].x_driver %}
    {% set y_driver = printer["gcode_macro _USER_VARIABLES"].y_driver %}
    {% set z_driver = printer["gcode_macro _USER_VARIABLES"].z_driver %}
    {% set old_current_x = printer.configfile.config[x_driver ~ ' stepper_x'].run_current|float %}
    {% set old_current_y = printer.configfile.config[y_driver ~ ' stepper_y'].run_current|float %}
    {% set old_current_z = printer.configfile.config[z_driver ~ ' stepper_z'].run_current|float %}

    # reset parameters
    {% set X, Y = False, False %}

    # Which axis has been requested for homing
    {% if axis == 'X' %}
        {% set X = True %}
    {% elif axis == 'Y' %}
        {% set Y = True %}
    {% endif %}

    # Ensure absolute mode is set
    {% if not printer['gcode_move'].absolute_coordinates %}
        G90
    {% endif %}

    # Move away from the endstop a bit
    {% if X %}
        G1 X{x_position_endstop + x_homing_backoff} F{homing_travel_speed}
    {% elif Y %}
        G1 Y{y_position_endstop + y_homing_backoff} F{homing_travel_speed}
    {% endif %}

    {% if sensorless_homing_enabled %}
        {% if kinematics == "corexy" %}
            M400
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={old_current_x}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={old_current_y}
        {% elif kinematics == "corexz" %}
            {% if X %}
                M400
                SET_TMC_CURRENT STEPPER=stepper_x CURRENT={old_current_x}
                SET_TMC_CURRENT STEPPER=stepper_z CURRENT={old_current_z}
            {% elif Y %}
                SET_TMC_CURRENT STEPPER=stepper_y CURRENT={old_current_y}
            {% endif %}
        {% elif kinematics == "cartesian" %}
            {% if X %}
                SET_TMC_CURRENT STEPPER=stepper_x CURRENT={old_current_x}
            {% elif Y %}
                SET_TMC_CURRENT STEPPER=stepper_y CURRENT={old_current_y}
            {% endif %}
        {% endif %}
    {% endif %}

    # Reset acceleration values to what it was before
    {% set saved_accel = printer["gcode_macro _HOME_PRE_AXIS"].saved_accel %}
    SET_VELOCITY_LIMIT ACCEL={saved_accel}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="READY"
    {% endif %}
