[gcode_macro CALIBRATE_Z]
rename_existing: _BASE_CALIBRATE_Z
description: Perform the Z calibration using the physical Z endstop and the dockable probe
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="CALIBRATING_Z"
    {% endif %}
    
    {% if verbose %}
        RESPOND MSG="Auto Z calibration..."
    {% endif %}
        
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home printer first!") }
    {% endif %}

    {% if verbose %}
        { action_respond_info("Z Offset calibration") }
    {% endif %}

    ACTIVATE_PROBE

    # Goto to z probe avoiding dock
    _GOTO_Z_PROBE

    # Auto Z offset adjustement. If a mesh is ready to be done, we look at the center point
    # and use it as the bed probing point. klipper_z_calibration plugin minimum version v0.8.2 needed
    # Else we just call a standard CALIBRATE_Z command (to get the center from the current mesh RRI or config bed center point)
    {% if bed_mesh_enabled %}
        {% set mesh_ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
        {% set mesh_center = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center %}

        {% if mesh_ready %}
            RESPOND MSG="Z calibration: a mesh is computed and ready, probing mesh center: {mesh_center}"
            _BASE_CALIBRATE_Z BED_POSITION={mesh_center}
        {% else %}
            RESPOND MSG="Z calibration: probing default point (or using current mesh RRI)"
            _BASE_CALIBRATE_Z
        {% endif %}
    {% else %}
        _BASE_CALIBRATE_Z
    {% endif %}

    DEACTIVATE_PROBE
    
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="READY"
    {% endif %}
