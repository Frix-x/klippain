##-----------------------------------------------------------------------------#
# Material management macros for klipper
#------------------------------------------------------------------------------#
# @version:1.3

# macros used to store useful parameters for filament and
#  and recall it at startup
# author: fbeauKmi (discord: fboc#1751)

# changelog :
#    V1.0 : initial release
#    V1.1 : improve MATERIAL_QUERY, Clean 'name' attribute
#    V1.2 : Change names MATERIAL to FILAMENT to avoid misinterpreting the macro, Review internal naming,
#    V1.3 : Add DB_FILAMENT_PRESSURE_ADVANCE and DB_FILAMENT_FLOW macros, extend _FILAMENT_APPLY

# Requirement : [save_variables] section must be configure and "filament",
# "filament[s]{,1}" should NOT be used for other purpose
# [firmware_retraction] could be used

# Macros :
#  _FILAMENT   : Variables
#  DB_FILAMENT : manage datas concerning filaments
#  FILAMENT    : Apply  pressure_advance, extrude_factor, retraction parameters
#                to the printer. Don't need to tweak your slicers profile.
#                ATTENTION  : If you plan to use 'extrude_factor' BE SURE that
#                extrusion multiplier is set to 1 in your Slicers.
#  DB_FILAMENT_QUERY  : Display filament infos from DB
#  DB_FILAMENT_FLOW  : Store data from COMPUTE_FLOW_MULTIPLIER
#  DB_FILAMENT_PRESSURE_ADVANCE : Store Pressure_advance value from BAND number
#  _FILAMENT_APPLY : (internal use) Set printer with settings (PA, EF, Retraction)
#  _PRINTER_DISPLAY_SETTING : (internal use) for verbose mode
#  _FILAMENT_INIT : Startup code, init _FILAMENT
#  _DB_MATERIAL_CLEAN : For v1.1 to v1.2 migration
#########################################
#  Deprecated macros that will be removed
#  _MATERIAL      -> _FILAMENT
#  DB_MATERIAL    -> DB_MATERIAL
#  MATERIAL       -> MATERIAL
#  MATERIAL_QUERY -> FILAMENT_QUERY

# Aknowledgements:
# -@fred V2.4096 from Discord:Voron_design server for unused parameters idea

# Datas are stored in a json array :
#  - name = name of filament [string]
#  all others datas are [float]
#  - bed_temp
#  - extruder_temp
#  - chamber_temp
#  - pressure_advance
#  - extrude_factor
#  - retract_length
#  - retract_speed
#  - unretract_extra_length
#  - unretract_speed
#  - soak_delay
#  - filter_speed
#  You can add your own parameters as it respect naming
#  (lowercase alpha and _) and the value can be stored as float.
# -----------------------------------------------------------------------------#

# Variable for enable/disable Filament's macro usage

## Variables for FILAMENT Macros
#  - default_filament = used to init new filament settings
#  - filament  =  store current filament settings can be call by any macros
#  like PRINT_START, PRINT_END, NOZZLE_WIPE, ...
#  Usage eg {% set BED_TEMP = printer['gcode_macro _FILAMENT'].filament.bed_temp %}
#  - use_extrude_factor (boolean) (Apply extrude_factor if true)
#  - use_pressure_advance (boolean) (Apply pressure_advance if true)
#
[gcode_macro _FILAMENT]
## default settings
variable_default_filament : {}  ## DO NOT CHANGE THIS LINE
variable_filament: {}
variable_unused : [        # List of unused in _FILAMENT_APPLY, still available from other gcode_macro
      #'pressure_advance',
      #'extrude_factor',
      #'speed_factor',
      #'soak_delay',
      #'filter_speed',
      #'z_adjust',
      'bed_temp',          # disable bed_temp change
      'chamber_min_temp'   # disable M191 S (wait for chamber_min_temp) 
      ] 
gcode:

## DB_FILAMENT
# save/update/del filament datas in file
# Usage :
#   DB_FILAMENT [NAME=<filament_name>] <SETTING_1>=<val_1> ... <SETTING_n>=<val_n>
#     Add or update settings to current filament or <filament_name> 
#   DB_FILAMENT NAME=<filament_name> FROM=<filament_name>
#     Clone an existing profile
#   DB_FILAMENT DEL=<filament_name>
#    where
#  <SETTINGS> are params from _FILAMENT default_filament
#  <vals> are _float_ numbers
#
# if called with unknown Filament name, a new filament setting is init.
# Missing <SETTINGS> are initialized from _FILAMENT default_filament otherwise
#
# KNOWN LIMITATIONS :
# DO NOT put FILAMENT inside PRINT_START, _FILAMENT will be update only after
# the macro full evaluation
# Material name are stored as Uppercase string only.
# Special characters will crash the macro
#
[gcode_macro DB_FILAMENT]
description: Helper:Store filament datas in save_variables file
    Usage: DB_FILAMENT [NAME/DEL=<filament_name>] [FROM=<filament_source>] [SETTINGS=<SETTINGS>] 
gcode:

     ##  Check [save_variables] First
    {% if not printer.save_variables is defined %}
        { action_raise_error("Configure [save_variables] first ! ") }
    {% endif %}

        # Load variables from _FILAMENT
    {% set _fil = printer["gcode_macro _FILAMENT"] %}
    {% set _d = _fil.default_filament %}
     # get stored datas for <NAME> or initialize array
    {% set db_table = printer.save_variables.variables["db_filament"] | default({}) %}
    
      # List parameters for UI
    {% if _d|length <= 1 %}

    ## Only for GUI (Mainsail/Fluidd)
    {% set _= params.NAME %}
    {% set _= params.DEL %}
    {% set _= params.FROM %}

##########################################################################################################
## COMMENT LINE OF UNWANTED SETTINGS, ADD YOUR OWN As you respect syntax below
## These lines are required to intialize default value. It allows UI to display default value
#                       Param name lower            =   Param name upper   default value
#                             |                              |                |
#                             V                              V                V
      {% set _=_d.update({  'bed_temp'              : params.BED_TEMP|default(90)|int                }) %}
      {% set _=_d.update({  'extruder_temp'         : params.EXTRUDER_TEMP|default(250)|int          }) %}
#      {% set _=_d.update({  'fan_speed'             : params.FAN_SPEED|default(20)|int               }) %}
      {% set _=_d.update({  'chamber_temp'          : params.CHAMBER_TEMP|default(60)|int            }) %}
#      {% set _=_d.update({  'chamber_min_temp'      : params.CHAMBER_MIN_TEMP|default(30)|int        }) %}
      {% set _=_d.update({  'pressure_advance'      : params.PRESSURE_ADVANCE|default(0.04)|float    }) %}
#      {% set _=_d.update({  'pa_smooth_time'        : params.PA_SMOOTH_TIME|default(40)|float        }) %}
      {% set _=_d.update({  'extrude_factor'        : params.EXTRUDE_FACTOR|default(0.93)|float      }) %}
#     {% set _=_d.update({  'speed_factor'          : params.SPEED_FACTOR|default(1)|float           }) %}
      {% set _=_d.update({  'retract_length'        : params.RETRACT_LENGTH|default(0.5)|float       }) %}
      {% set _=_d.update({  'retract_speed'         : params.RETRACT_SPEED|default(40)|float         }) %}
      {% set _=_d.update({  'unretract_extra_length': params.UNRETRACT_EXTRA_LENGTH|default(0)|float }) %}
      {% set _=_d.update({  'unretract_speed'       : params.UNRETRACT_SPEED|default(40)|float       }) %}
      {% set _=_d.update({  'soak_delay'            : params.SOAK_DELAY|default(5)|float             }) %}
      {% set _=_d.update({  'filter_speed'          : params.FILTER_SPEED|default(0.5)|float         }) %}
      {% set _=_d.update({  'z_adjust'              : params.Z_ADJUST|default(0)|float               }) %}
#      {% set _=_d.update({  'max_flow'              : params.MAX_FLOW|default(30)|float              }) %}
#     {% set _=_d.update({  'exhaust_fan_speed'     : params.EXHAUST_FAN_SPEED|default(0)|float      }) %}
#     {% set _=_d.update({  'your_own_param'        : params.YOUR_OWN_PARAM|default(0)|float         }) %}
#
##########################################################################################################


## DO NOT CHANGE BELOW
    ## Initialize default settings (Called at startup)
    RESPOND MSG="Initialize default filament settings"
    SET_GCODE_VARIABLE MACRO=_FILAMENT VARIABLE=default_filament VALUE='{ _d|tojson|string }'
    M400

    # Validate input Params
    {% elif params|length == 0 %}
        RESPOND  MSG="DB_FILAMENT failed : Parameters must be set"
    {% elif not params.NAME and not params.DEL and not _fil.filament.name %}
        RESPOND  MSG="DB_FILAMENT failed : NAME or DEL param must be set"
    {% elif params.NAME and params.DEL %}
        RESPOND  MSG="DB_FILAMENT failed : NAME and DEL can't be used together"
    {% elif params.FROM and not params.NAME %}
        RESPOND  MSG="DB_FILAMENT failed : FROM and NAME must be used together"
    {% else %}

      {% set current_name = _fil.filament.name | default('none') | upper %}
      {% set name = params.NAME | default(params.DEL) | default(current_name) | upper %}

      {% set filament = db_table[name] | default({}) %}

      {% if params.FROM %}
        {% set filament = db_table[params.FROM | upper].copy() | default({'err' : 1}) %}
        {% if filament.err == 1 %}
          { action_raise_error("%s is not in DB - cannot copy it" % params.FROM | upper) }
        {% endif %}
      {% endif %}

      {%if params.DEL %}
      ## DELETE FILAMENT
        {% if name in db_table %}
          {% set _= db_table.pop(name) %}
          {% set _default_filament_name = printer.save_variables.variables["filament.name"] %}
            {% if name == _default_filament_name %}
              SET_GCODE_VARIABLE MACRO=_FILAMENT VARIABLE=filament VALUE=''
              { 'UPDATE_VARIABLE' if printer['gcode_macro UPDATE_VARIABLE'] is defined else 'SAVE_VARIABLE' } VARIABLE=filament_name VALUE=''
            {% endif %}
          RESPOND  MSG="{"%s removed successfully from DB" % name}"
        {% else %}
          RESPOND  MSG="{"WARNING : %s does not present in DB" % name}"
        {% endif %}

      {% else %}
      ## ADD or UPDATE FILAMENT
        ## Update array : required for new row  ##
        {% set _= db_table.update({name : filament}) %}

        {% if filament | length == 0 %}
             RESPOND MSG="{"Add filament settings for %s" % name }"
        {% else %}
             RESPOND MSG="{"Update filament settings for %s" % name }"
        {% endif %}

        ## Update/Set new values from settings ##
        {% for param in params %}
            {% if param in ['NAME','FROM','DEL'] %}
            {% elif param | lower in _d %}
              {% set _= filament.update({param | lower:params[param] | float}) %}
            {% else %}
               RESPOND  MSG="{"WARNING : %s is not a valid setting" % param | upper }"
            {% endif %}
        {% endfor %}

      {% endif %}
    {% endif %}
    ## Store in file
     SAVE_VARIABLE VARIABLE=db_filament VALUE='{ db_table|tojson|string }'


## FILAMENT
#
#  Get/set/list filament
# Usage:
#  FILAMENT              (apply current settings to printer)
#  FILAMENT NAME=<name>  (change filament to <name>, apply settings to printer)
[gcode_macro FILAMENT]
description: Helper:Get/set current filament
    Usage: FILAMENT [NAME=<filament_name>]
gcode:
    ## Load variables
    {% set _verbose = printer['gcode_macro _USER_VARIABLES'].verbose %}
    {% set _fil = printer["gcode_macro _FILAMENT"] %}
    
    ## Check [save_variables]
    {% if not printer.save_variables is defined %}
      { action_raise_error("configure [save_variables] first!") }
    {% endif %}

    {% if params['DEL'] or params['FROM'] %}
      RESPOND  MSG="{"WARNING: you should try with DB_FILAMENT instead"}"
    {% else %}
      {% set name = params.NAME | upper %}
      {% set _d = _fil.default_filament | default({}) %}
      {% set previous_name = _fil.filament.name | default(False)  %}

      {% if name %}
      ## Get stored filament settings or default if unset
        {% set db_table = printer.save_variables.variables['db_filament'] | default({}) %}
        {% set filament = db_table[name] | default({'err' : 1}) %}
        {% for s in _d %}
            {% set _= filament.update({s :  filament[s] | default(_d[s])}) %}
        {% endfor %}
        {% if filament.err == 1 %}
            RESPOND  MSG="{"WARNING : No settings for %s filament. Use DB_FILAMENT to configure it" % params.NAME|string}"
            { action_raise_error("Aborting Material change") }
        {% else %}
            {% set _= filament.update({'name' : name}) %}
        {% endif %}

        RESPOND  MSG="{"Load settings for %s%s" % (filament.name," (previously %s)" %
                        previous_name if ( previous_name and previous_name != name )  else '')}"

        SET_GCODE_VARIABLE MACRO=_FILAMENT VARIABLE=filament VALUE='{ filament|tojson|string }'
        { 'UPDATE_VARIABLE' if printer['gcode_macro UPDATE_VARIABLE'] is defined else 'SAVE_VARIABLE' } VARIABLE=filament_name VALUE='"{filament.name}"'
        M400 #Empty queue before evaluate next command
        ## Apply settings
        _FILAMENT_APPLY
      {% else %}
        RESPOND  MSG="{"Filament loaded %s" % _fil.filament.name}"
      {% endif %}
      {% if _verbose %}
        FILAMENT_QUERY NAME={ filament.name if filament else _fil.filament.name }
      {% endif %}
    {% endif %}

## FILAMENT_QUERY
# display store settings
# Usage :
#    FILAMENT_QUERY
#    FILAMENT_QUERY NAME=<filament_name>
[gcode_macro FILAMENT_QUERY]
description: Helper:Display settings of request filament or list of settings
    Usage: FILAMENT_QUERY [NAME=<filament_name>]
gcode:
    ## Check [save_variables]
    {% if not printer.save_variables is defined %}
        { action_raise_error("configure [save_variables] first !") }
    {% endif %}

    ## Read stored settings
    {% set db_table = printer.save_variables.variables['db_filament'] | default({}) %}

    {% if params.NAME is defined %}
    ## Display stored settings for NAME
      {% set filament = db_table[params.NAME | upper] | default (False) %}
      {% set _d = printer['gcode_macro _FILAMENT'].default_filament | default({}) %}

      {% if filament %}
        {% set output_txt = ["Settings for %s:" % params.NAME | upper] %}
        ## Sort settings by key
        {% for p, _default_value in _d | dictsort(False) %}
            {% set _= output_txt.append("_ %s : %s" % (p , filament[p] | default("%s (default)" % _default_value))) %}
        {% endfor %}
        { action_respond_info(output_txt | join('\n')) }
      {% else %}
        { action_respond_info("WARNING : No settings for %s" % params.NAME | upper) }
      {% endif %}
    {% else %}
     ## List available filaments and display settings  ##
      {% set output_txt= [" Available filaments :\n"] %}
      {% for m, vals in  db_table|dictsort(false) %}
        {% set _= output_txt.append("'%s' : %s" % (m, vals)) %}
      {% endfor %}
      {action_respond_info(output_txt | join('\n')) }

    {% endif %}

## _FILAMENT_APPLY
# for internal use
# apply settings to the printer:
#    pressure_advance
#    extrude_factor
#    retraction
# Temperatures are applied only 10s after print start
[gcode_macro _FILAMENT_APPLY]
gcode:
    {% set _fil = printer['gcode_macro _FILAMENT'] %}
    {% set _vars = printer['gcode_macro _User_Variables'] %}
    {% set filament = _fil.filament %}
    {% if  filament.name is defined %}

        RESPOND MSG="{"Apply settings for %s" % filament.name | string }"
        
        G4 P100 #workaround : seems to solve MCU timer too close after tip_shaping need investigation
        {% if printer.idle_timeout.printing_time > 10 %}
        ## Apply bed_temp if bed is heating
          {% if filament.bed_temp is defined and 'bed_temp' not in _fil.unused %}
            M190 S{filament.bed_temp|float}
          {% endif %}

        ## Apply chamber_min_temp if bed is heating
          {% if filament.chamber_min_temp is defined and 'chamber_min_temp' not in _fil.unused %}
            M191 S{filament.chamber_min_temp|float}
          {% endif %}
          {% if 'chamber_temp' not in _fil.unused %}
            M191 R{filament.chamber_temp|float}
          {% endif %}

        ## Apply Extruder_temp if extruder is heating
          {% if filament_extruder_temp is defined and 'extruder_temp' not in _fil.unused %}
            M109 S{filament.extruder_temp|float}
          {% endif %}
        {% endif %}

        ## Apply Pressure_Advance
        {% if filament.pressure_advance is defined and 'pressure_advance' not in _fil.unused %}
          {% set _PA_str = " ADVANCE=%s " % filament.pressure_advance|float %}
        {% endif %}
        {% if filament.pa_smooth_time is defined and 'pa_smooth_time' not in _fil.unused %}
          {% set _PA_str = "%s SMOOTH_TIME=%s " % (_PA_str|default(''),filament.pa_smooth_time|float) %}
        {% endif %}
        {% if _PA_str%}
          SET_PRESSURE_ADVANCE{_PA_str}
        {% endif %}

        ## Apply Extrude_factor
        {% if filament.extrude_factor is defined and 'extrude_factor' not in _fil.unused %}
          M221 S{filament.extrude_factor|default(1)|float *100}
          {% if _fil.verbose %}
            M400  #Empty queue before evaluate next command
            _PRINTER_DISPLAY_SETTING VARIABLE=extrude_factor
          {% endif %}
        {% endif %}

         ## Apply Speed_factor
        {% if filament.speed_factor is defined and 'speed_factor' not in _fil.unused %}
          M220 S{filament.speed_factor|default(1)|float *100}
          {% if _fil.verbose %}
            M400  #Empty queue before evaluate next command
            _PRINTER_DISPLAY_SETTING VARIABLE=speed_factor
          {% endif %}
        {% endif %}

        ## Apply firmware_retraction
        {% if 'firmware_retraction' in printer.configfile.settings %}
          {% for p in filament if 'retract_' in p %}
            {% if p not in _fil.unused %}
              SET_RETRACTION { p|upper }={filament[p]}
            {% endif %}
          {% endfor %}
        {% endif %}
        G4 P100 #workaround : seems to solve MCU timer too close after tip_shaping need investigation
    {% else %}
        { action_raise_error("No filament settings loaded ! check your config")  }
    {% endif %}

## _INIT_FILAMENT
# restore FILAMENT at startup
[delayed_gcode _INIT_FILAMENT_DELAYED]
initial_duration : 1
gcode:
 
    {% set filament_name = printer.save_variables.variables['filament_name']|default(0) %}
    DB_FILAMENT
    M400
    {% if filament_name %}
          FILAMENT NAME={filament_name}
    {% endif %}
    # Database Filament Clean to suppress parameters globaly deleted but previously stored for filament parameters
    _DB_FILAMENT_CLEAN

################################################################
#   Store calibration values from Frix-x calibrate macros
################################################################
[gcode_macro DB_FILAMENT_FLOW]
description: Helper:Store evaluated flow from COMPUTE_FLOW_MULTIPLIER
    Usage: DB_FILAMENT_FLOW [NAME=<filament_name>]
gcode:
    {% set _fil=printer['gcode_macro _FILAMENT'] %}
    {% set _flow=printer['gcode_macro _FLOW_CALIB_VARIABLES'] %}
    {% set filament_name=params.NAME| default(_fil.filament.name) |upper %}

    {% if _flow.new_evalue > 0 %}
      DB_FILAMENT NAME={filament_name} EXTRUDE_FACTOR={_flow.new_evalue}
      RESPOND  MSG="{"new extrude_factor for %s : %.5f" % (filament_name,_flow.new_evalue)}"
    {% else %}
      RESPOND MSG="Run COMPUTE_FLOW_MULTIPLIER first !"
    {% endif %}

[gcode_macro DB_FILAMENT_PRESSURE_ADVANCE]
description: Helper:Store evaluated pressure_advance
    Usage: DB_FILAMENT_FLOW [NAME=<filament_name>] [BAND=<band_number>]
gcode:
    {% set _fil=printer['gcode_macro _FILAMENT'] %}
    {% set _pa=printer['gcode_macro _PA_CALIB_VARIABLES'] %}
    {% set pa=_pa.pa_start|float + (_pa.pa_increment|float * (params.BAND|default(1)|float)) %}
    {% set filament_name=params.NAME| default(_fil.filament.name) |upper %}
   
    {% if _pa.pa_increment > 0 %}
      {% if params.BAND %}
        DB_FILAMENT NAME={filament_name} PRESSURE_ADVANCE={pa}
        RESPOND  MSG="{"new pressure_advance for %s : %.5f" % (filament_name,pa)}"
      {% else %}
        RESPOND  TYPE=error MSG="BAND parameter must be set"
      {% endif %}
    {% else %}
      RESPOND  MSG="Do PRESSURE_ADVANCE_CALIBRATION first !"
    {% endif %}

################################################################
## COMPATIBILITY FUNCTIONS WITH V < 1.2 
## _DB_MATERIAL_CLEAN
# transition from V1.1 to v1.2
[gcode_macro _DB_FILAMENT_CLEAN]
gcode:
    {% set _db_filament = printer.save_variables.variables['db_filament'] %}
    {% set _default_filament = printer['gcode_macro _FILAMENT'].default_filament %}
    	RESPOND MSG="_default_filament : {_default_filament}"
    {% if _db_filament %}
      {% for _filament in _db_filament %}
        {% set _removed= [] %}
        {% for _parameter, _value in _db_filament[_filament].items() %}
          {% if _parameter not in _default_filament %}
            {% set _= _db_filament[_filament].pop(_parameter) %}
            {% set _= _removed.append(_parameter) %}
          {% else %}
            {% for _p, _v  in _default_filament.items() %}
              {% if _parameter == _p and _value == _v %}
                # remove parameter with same value then default (limit database size)
                {% set _= _db_filament[_filament].pop(_parameter) %}
                {% set _= _removed.append(_parameter) %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}
        {% if _removed|length %}
          {action_respond_info("%s removed from %s" % (_removed|join(', '), _filament))}
        {% endif %}
      {% endfor %}
      SAVE_VARIABLE VARIABLE=db_filament VALUE='{_db_filament|tojson|string}'
      RESPOND  MSG="unknown parameters removed from DB_FILAMENT"
    {% endif %}
	