# This file is used as in interface to activate/deactivate every probe type
# depending of the needs:
#  - TAP: need to be at a correct nozzle temperature to avoid burning the PEI when used
#  - Dockable probe: need to be attached/docked when used
#  - ... can be improved depending of new probes needs ...

[gcode_macro ACTIVATE_PROBE]
description: Put the machine in a state being able to probe
variable_temperature: 0
gcode:
    {% set LOCK = params.LOCK|default(False, boolean=true) %}

    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled %}
    {% set tap_max_probing_temp = printer["gcode_macro _USER_VARIABLES"].tap_max_probing_temp|float %}

    # If a dockable probe is defined, then check and ATTACH the probe
    {% if probe_type_enabled == "dockable" or probe_type_enabled == "dockable_virtual" %}
        _CHECK_PROBE action=query
        {% if LOCK %}
            _ATTACH_PROBE_LOCK
        {% else %}
            _ATTACH_PROBE
        {% endif %}

    # If a Voron TAP probe is defined, then check the temperature and lower it if needed
    {% elif probe_type_enabled == "vorontap" %}
        SAVE_GCODE_STATE NAME=BEFORE_TAP_ACTION

        {% set ACTUAL_TEMP = printer.extruder.temperature %}
        {% set TARGET_TEMP = printer.extruder.target %}

        SET_GCODE_VARIABLE MACRO=ACTIVATE_PROBE VARIABLE=temperature VALUE={TARGET_TEMP}

        {% if TARGET_TEMP > tap_max_probing_temp %}
            { action_respond_info('Extruder temperature target of %.1fC is too high for TAP probing, lowering to %.1fC' % (TARGET_TEMP, tap_max_probing_temp)) }
            M106 S255 ; 100% the part cooling fan to help the extruder cooling
            M109 S{tap_max_probing_temp}
            M106 S0   ; Stop the part cooling fan
        {% else %}
            # Temperature target is already low enough, but nozzle may still be too hot
            {% if ACTUAL_TEMP > tap_max_probing_temp + 3 %}
                M106 S255 ; 100% the part cooling fan to help the extruder cooling
                TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={tap_max_probing_temp}
                M106 S0   ; Stop the part cooling fan
            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro DEACTIVATE_PROBE]
description: Revert the machine to a normal state after probing
gcode:
    {% set UNLOCK = params.UNLOCK|default(False, boolean=true) %}

    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled %}
    {% set tap_deactivation_zhop = printer["gcode_macro _USER_VARIABLES"].tap_deactivation_zhop %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    # If a dockable probe is defined, then check and DETTACH the probe
    {% if probe_type_enabled == "dockable" or probe_type_enabled == "dockable_virtual" %}
        _CHECK_PROBE action=query
        {% if UNLOCK %}
            _DOCK_PROBE_UNLOCK
        {% else %}
            _DOCK_PROBE
        {% endif %}

    # If a Voron TAP probe is defined, then check and restore the nozzle temperature if needed
    {% elif probe_type_enabled == "vorontap" %}
        # Small Z hop to avoid restoring the temperature directly on the PEI
        {% set z_safe = printer.toolhead.position.z + tap_deactivation_zhop %}
        {% if z_safe > printer.toolhead.axis_maximum.z %}
            {% set z_safe = printer.toolhead.axis_maximum.z %}
        {% endif %}
        G90
        G1 Z{z_safe} F{Sz}

        # Then restoring the temperature
        {% set old_target_temperature = printer["gcode_macro ACTIVATE_PROBE"].temperature %}
        M109 S{old_target_temperature}

        RESTORE_GCODE_STATE NAME=BEFORE_TAP_ACTION
    {% endif %}
