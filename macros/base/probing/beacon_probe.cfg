# This file is used as an interface to activate/deactivate every probe type
# depending of the needs:
#  - Beacon: need to be at a correct nozzle temperature to avoid burning the PEI when used

[gcode_macro ACTIVATE_PROBE]
description: Put the machine in a state being able to probe
variable_temperature: 0
gcode:
    {% set beacon_max_probing_temp = printer["gcode_macro _USER_VARIABLES"].beacon_max_probing_temp|float %}

    # Check the temperature and lower it if needed
    SAVE_GCODE_STATE NAME=BEFORE_BEACON_ACTION

    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    SET_GCODE_VARIABLE MACRO=ACTIVATE_PROBE VARIABLE=temperature VALUE={TARGET_TEMP}

    {% if TARGET_TEMP > beacon_max_probing_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high for Beacon probing, lowering to %.1fC' % (TARGET_TEMP, beacon_max_probing_temp)) }
        M106 S255 ; 100% the part cooling fan to help the extruder cooling
        M109 S{beacon_max_probing_temp}
        M106 S0   ; Stop the part cooling fan
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot
        {% if ACTUAL_TEMP > beacon_max_probing_temp + 3 %}
            M106 S255 ; 100% the part cooling fan to help the extruder cooling
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={beacon_max_probing_temp}
            M106 S0   ; Stop the part cooling fan
        {% endif %}
    {% endif %}


[gcode_macro DEACTIVATE_PROBE]
description: Revert the machine to a normal state after probing
gcode:
    {% set beacon_deactivation_zhop = printer["gcode_macro _USER_VARIABLES"].beacon_deactivation_zhop %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    # Check and restore the nozzle temperature if needed
    # Small Z hop to avoid restoring the temperature directly on the PEI
    {% set z_safe = printer.toolhead.position.z + beacon_deactivation_zhop %}
    {% if z_safe > printer.toolhead.axis_maximum.z %}
        {% set z_safe = printer.toolhead.axis_maximum.z %}
    {% endif %}
    G90
    G1 Z{z_safe} F{Sz}

    # Then restoring the temperature
    {% set old_target_temperature = printer["gcode_macro ACTIVATE_PROBE"].temperature %}
    M109 S{old_target_temperature}

    RESTORE_GCODE_STATE NAME=BEFORE_BEACON_ACTION
