#############################################################################
# Modified dockable macros intended for use with a dockable probe used as a
# virtual Z endstop. We don't want to override everything, just the functions
# needed to support homing
#############################################################################

[include dockable_probe.cfg]

[gcode_macro _ATTACH_PROBE]
description: Attaches probe
gcode:
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # Get Docking location
    {% set probe_dock_location_x, probe_dock_location_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_location_xy|map('float') %}

    {% set probe_before_attach_position = printer["gcode_macro _USER_VARIABLES"].probe_before_attach_position|string %}
    {% set probe_after_attach_position = printer["gcode_macro _USER_VARIABLES"].probe_after_attach_position|string %}
    {% set probe_move_attach_length = printer["gcode_macro _USER_VARIABLES"].probe_move_attach_length %}

    # Safe Z for travel
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}

    # Set speed
    {% set probe_dock_speed = printer["gcode_macro _USER_VARIABLES"].probe_dock_speed * 60 %}
    {% set probe_dock_accel = printer["gcode_macro _USER_VARIABLES"].probe_dock_accel %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set probe_servo_enabled = printer["gcode_macro _USER_VARIABLES"].probe_servo_enabled %}


    _ENTRY_POINT FUNCTION=ATTACH_PROBE

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home XY axes first!") }

    # If probe not attached and locked
    {% elif not probe_attached and not probe_lock %}
        {% if verbose %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        
        # Reset Z position to 0 since we haven't homed Z yet
        {% if not 'z' in printer.toolhead.homed_axes %}
            {% if verbose %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}
        
        # Move to safe Z
        {% if (printer.toolhead.position.z < probe_min_z_travel) %}
            {% if verbose %}
                { action_respond_info("Moving to a safe Z distance") }
            {% endif %}
            G0 Z{probe_min_z_travel} F{z_drop_speed}
        {% endif %}

        # Set the dock/undock acceleration prior to any movement
        {% set saved_accel = printer.toolhead.max_accel %}
        {% set saved_decel = printer.toolhead.max_accel_to_decel %}
        M204 S{probe_dock_accel}

        # Probe entry location
        _PROBE_MOVE_TO LOCATION={probe_before_attach_position} DISTANCE={probe_move_attach_length} SPEED={travel_speed}

        # Deploy dock using the servo (if available)
        {% if probe_servo_enabled %}
            _SERVO_DEPLOY ITEM="probe"
        {% endif %}

        # Pickup from Probe location
        _PROBE_MOVE_TO LOCATION='dock' SPEED={probe_dock_speed}
        
        # Get the probe out of the dock
        _PROBE_MOVE_TO LOCATION={probe_after_attach_position} DISTANCE={probe_move_attach_length} SPEED={probe_dock_speed}

        # Retract dock using the servo (if available)
        {% if probe_servo_enabled %}
            _SERVO_RETRACT ITEM="probe"
        {% endif %}

        # Reset acceleration values to what it was before
        SET_VELOCITY_LIMIT ACCEL={saved_accel} ACCEL_TO_DECEL={saved_decel}

        _CHECK_PROBE action=attach

    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        _CHECK_PROBE action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        _CHECK_PROBE action=query

    {% endif %}
    _EXIT_POINT FUNCTION=ATTACH_PROBE


[gcode_macro _DOCK_PROBE]
description: Docks probe
gcode:
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _PROBE_VARIABLES"].probe_attached %}
    {% set probe_lock = printer["gcode_macro _PROBE_VARIABLES"].probe_lock %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # Get Docking location
    {% set probe_dock_location_x, probe_dock_location_y = printer["gcode_macro _USER_VARIABLES"].probe_dock_location_xy|map('float') %}
    
    {% set probe_before_dock_position = printer["gcode_macro _USER_VARIABLES"].probe_before_dock_position|string %}
    {% set probe_after_dock_position = printer["gcode_macro _USER_VARIABLES"].probe_after_dock_position|string %}
    {% set probe_move_dock_length = printer["gcode_macro _USER_VARIABLES"].probe_move_dock_length %}

    # Safe Z for travel
    {% set probe_min_z_travel = printer["gcode_macro _USER_VARIABLES"].probe_min_z_travel|float %}

    # Set speed
    {% set probe_dock_speed = printer["gcode_macro _USER_VARIABLES"].probe_dock_speed * 60 %}
    {% set probe_dock_accel = printer["gcode_macro _USER_VARIABLES"].probe_dock_accel %}
    {% set travel_speed = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}

    {% set probe_servo_enabled = printer["gcode_macro _USER_VARIABLES"].probe_servo_enabled %}


    _ENTRY_POINT FUNCTION=DOCK_PROBE

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must home axis first!") }

    # If probe not attached and not locked
    {% elif probe_attached and not probe_lock %}
        {% if verbose %}
            { action_respond_info("Docking Probe") }
        {% endif %}

        # Move to safe Z
        {% if (printer.toolhead.position.z < probe_min_z_travel) %}
            {% if verbose %}
                { action_respond_info("Moving to a safe Z distance") }
            {% endif %}
            G0 Z{probe_min_z_travel} F{z_drop_speed}
        {% endif %}

        # Set the dock/undock acceleration prior to any movement
        {% set saved_accel = printer.toolhead.max_accel %}
        {% set saved_decel = printer.toolhead.max_accel_to_decel %}
        M204 S{probe_dock_accel}

        # Probe entry location
        _PROBE_MOVE_TO LOCATION={probe_before_dock_position} DISTANCE={probe_move_dock_length} SPEED={travel_speed}

        # Deploy dock using the servo (if available)
        {% if probe_servo_enabled %}
            _SERVO_DEPLOY ITEM="probe"
        {% endif %}

        # Pickup from Probe location
        _PROBE_MOVE_TO LOCATION='dock' SPEED={probe_dock_speed}
        
        # Get detach probe
        _PROBE_MOVE_TO LOCATION={probe_after_dock_position} DISTANCE={probe_move_dock_length} SPEED={probe_dock_speed}

        # Retract dock using the servo (if available)
        {% if probe_servo_enabled %}
            _SERVO_RETRACT ITEM="probe"
        {% endif %}

        # Reset acceleration values to what it was before
        SET_VELOCITY_LIMIT ACCEL={saved_accel} ACCEL_TO_DECEL={saved_decel}

        G4 P500
        _CHECK_PROBE action=dock

    {% elif probe_lock %}
        {% if verbose %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        _CHECK_PROBE action=query

    {% else %}
        {% if verbose %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        _CHECK_PROBE action=query

    {% endif %}
    _EXIT_POINT FUNCTION=DOCK_PROBE


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CHECK_PROBE]
variable_probe_state: 0
gcode:
    Query_Probe
    _SET_PROBE_STATE action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SET_PROBE_STATE]
gcode:
    {% set probe_last_query = printer.probe.last_query %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    # If triggered (true), probe not attached
    {% if probe_last_query %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=_PROBE_VARIABLES VARIABLE=probe_state VALUE={ probe_last_query }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not probe_last_query and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if probe_last_query and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}
