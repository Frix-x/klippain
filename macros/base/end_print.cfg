## The END_PRINT sequence is modular and fully customizable. A default END_PRINT sequence is auto-populated.
## Available actions: "retract_filament", "turn_off_heaters", "turn_off_fans", "turn_off_motors"
##
[gcode_macro _USER_VARIABLES]
variable_endprint_actions: "retract_filament", "turn_off_heaters", "turn_off_fans", "turn_off_motors", "reset_limits"
gcode: # do not remove this line

[gcode_macro END_PRINT]
description: Stop the print and filter the atmosphere for 10min before shuting down
gcode:
    {% set light_intensity_end_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_end_print %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}
    {% set exhaust_enabled = printer["gcode_macro _USER_VARIABLES"].exhaust_enabled %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set filter_default_time = printer["gcode_macro _USER_VARIABLES"].filter_default_time_on_end_print|default(600)|int %}
    {% set exhaust_filter_default_time = printer["gcode_macro _USER_VARIABLES"].filter_exhaust_default_time_on_end_print|default(600)|int %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}
    {% set retract_length = printer["gcode_macro _USER_VARIABLES"].retract_length|default(20)|float %}

    PARK

    M400

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    # Here is the core of the END_PRINT were we get the endprint_actions variable
    # to do the procedure in the correct order or a custom user override.
    #
    # Custom actions can be called by defining a gcode macro as in the following example
    # and adding `custom1` to the endprint_actions override config.
    # [gcode_macro _END_PRINT_ACTION_CUSTOM1]
    # gcode:
    #   ## Your custom code here
    #
    {% set ep_actions = printer["gcode_macro _USER_VARIABLES"].endprint_actions %}
    {% for action in ep_actions %}
        {% if action == "retract_filament" %}
            _MODULE_RETRACT_FILAMENT
        {% elif action == "turn_off_heaters" %}
            _MODULE_TURN_OFF_HEATERS
        {% elif action == "turn_off_fans" %}
            _MODULE_TURN_OFF_FANS
        {% elif action == "turn_off_motors" %}
            _MODULE_TURN_OFF_MOTORS
        {% elif action == "reset_limits" %}
            _MODULE_RESET_LIMITS
        {% else %}
            {% if "_END_PRINT_ACTION_%s" % (action|upper) in printer.gcode.commands %}
                _END_PRINT_ACTION_{action|upper} {rawparams}
            {% else %}
                { action_raise_error("Unknown module %s called in END_PRINT! Please verify your endprint_actions variable override!" % (action)) }
            {% endif %}
        {% endif %}
    {% endfor %}

    # If a filter is connected, and used during the print, continue filtering the air
    # for a couple of min before stopping everything
    {% if filter_enabled %}
        {% if printer['fan_generic filter'].speed > 0 %}
            {% set FILTER_TIME = params.FILTER_TIME|default(filter_default_time)|int %}
            START_FILTER SPEED=1
            UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION={FILTER_TIME}
        {% endif %}
    {% endif %}
    #Same for exhaust filter
     {% if exhaust_enabled %}
        {% set EXHAUST_TIME = params.FILTER_TIME|default(exhaust_filter_default_time)|int %}
        START_EXHAUST SPEED=1
        UPDATE_DELAYED_GCODE ID=_STOP_EXHAUST_DELAYED DURATION={EXHAUST_TIME}
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_end_print}
    {% endif %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="DONE_PRINTING"
    {% endif %}

    {% if klippain_mmu_enabled %}
        {% if printer.mmu.enabled and printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_END
        {% endif %}
    {% endif %}

    # If a filament sensor is connected, re-enable it in case it was disabled during printing
    {% if filament_sensor_enabled %}
        SET_FILAMENT_SENSOR SENSOR="runout_sensor" ENABLE=1
    {% endif %}
    
    SET_PAUSE_NEXT_LAYER ENABLE=0
    SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0


[gcode_macro _MODULE_RETRACT_FILAMENT]
gcode:
    # ----- RETRACT FILAMENT -------------------------------------
    # Retract filament for easier swaps at the end of a print job 
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set mmu_unload = params.MMU_UNLOAD_AT_END|default(printer["gcode_macro _USER_VARIABLES"].mmu_unload_on_end_print)|default(0)|int %}

    {% if klippain_mmu_enabled %}
        {% if printer.mmu.enabled and mmu_unload %}
            # unload filament and park into MMU. Or just unload filament out of extruder if using bypass.
            MMU_UNLOAD
        {% endif %}
    {% elif printer.extruder.can_extrude %}
        # pull back the filament a little bit
        G92 E0
        G1 E-{retract_length} F2100
    {% endif %}

[gcode_macro _MODULE_TURN_OFF_HEATERS]
gcode:
    # ----- TURN OFF HEATERS -------------------------------------
    # Turn off all heaters at the end of a print job
    {% set turn_off_heaters_in_end_print = printer["gcode_macro _USER_VARIABLES"].turn_off_heaters_in_end_print %}
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}

    {% if turn_off_heaters_in_end_print %}
        TURN_OFF_HEATERS
    {% else %}
        SET_HEATER_TEMPERATURE HEATER=extruder TARGET={safe_extruder_temp}
    {% endif %}


[gcode_macro _MODULE_TURN_OFF_FANS]
gcode:
    # ----- TURN OFF FANS -------------------------------------
    # Turn off fans and fan monitoring at the end of a print job
    {% set hotend_fan_tach_enabled = printer["gcode_macro _USER_VARIABLES"].hotend_fan_tach_enabled %}

    {% if hotend_fan_tach_enabled %}
        UPDATE_DELAYED_GCODE ID=_BACKGROUND_HOTEND_TACHO_CHECK DURATION=0
    {% endif %}

    M107


[gcode_macro _MODULE_TURN_OFF_MOTORS]
gcode:
    # ----- TURN OFF MOTORS -------------------------------------
    # Disable the motors at the end of a print job
    {% set disable_motors_in_end_print = printer["gcode_macro _USER_VARIABLES"].disable_motors_in_end_print %}

    {% if disable_motors_in_end_print %}
        M84
    {% endif %}


[gcode_macro _MODULE_RESET_LIMITS]
gcode:
    # ----- RESET LIMITS ---------------------------------
    # Reset velocity limits, extrusion and speed factor (if configured)
    {% set reset_velocity_limits = printer["gcode_macro _USER_VARIABLES"].reset_velocity_limits_in_end_print %}
    {% set reset_extrude_factor = printer["gcode_macro _USER_VARIABLES"].reset_extrude_factor_in_end_print %}
    {% set reset_speed_factor = printer["gcode_macro _USER_VARIABLES"].reset_speed_factor_in_end_print %}

    {% if reset_speed_factor %}
        M220 S100
    {% endif %}

    {% if reset_extrude_factor %}
        M221 S100
    {% endif %}

    {% if reset_velocity_limits %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity}
        SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
        SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

        # Legacy Klipper versions
        {% if printer.configfile.settings.printer.max_accel_to_decel is defined %}
            SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
        {% endif %}

        # Modern Klipper versions
        {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
            SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio}
        {% endif %}
    {% endif %}
