[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_initial_tool: 0
variable_material: "XXX"
variable_fl_size: "0_0_0_0"
gcode:
    # Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %} # Extruder temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %} # Bed temperature
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES"].print_default_soak)|int %} # Heatsoak time of the bed in minutes
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %} # Chamber temperature setpoint
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %} # Chamber heatsoak timeout in minutes
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %} # Initial tool (for the ERCF initialization)
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %} # Material type set in the slicer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %} # Get bounding box of the first layer for the adaptive bed mesh

    # Set the variables to be used in all the modules based on the slicer parameters
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=soak VALUE={SOAK}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_tool VALUE={INITIAL_TOOL}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=material VALUE='"{MATERIAL}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=fl_size VALUE='"{FL_SIZE}"'

    # Get all the config options and configurations for this macro
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    {% set klippain_ercf_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_ercf_enabled %}
    {% set ercf_reset_stats_on_start_print = printer["gcode_macro _USER_VARIABLES"].ercf_reset_stats_on_start_print %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set firmware_retraction_enabled = printer["gcode_macro _USER_VARIABLES"].firmware_retraction_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% if MATERIAL not in printer["gcode_macro _USER_VARIABLES"].material_parameters %}
        RESPOND MSG="Material '{MATERIAL}' is unknown!"
        { action_raise_error("Add this new material to your material_parameters variable!") }
    {% else %}
        RESPOND MSG="Material '{MATERIAL}' is used"
        {% set material = printer["gcode_macro _USER_VARIABLES"].material_parameters[MATERIAL] %}
    {% endif %}


    # --------------------------------
    # Let's do the START_PRINT actions
    # --------------------------------
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="BUSY"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_start_print}
    {% endif %}

    CLEAR_PAUSE

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    {% if klippain_ercf_enabled %}
        {% if printer.ercf.enabled %}
            {% if ercf_reset_stats_on_start_print %}
                ERCF_RESET_STATS
            {% endif %}
        {% endif %}
    {% endif %}

    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    # Material parameters
    {% if firmware_retraction_enabled %}
        SET_RETRACTION RETRACT_LENGTH={material.retract_length} RETRACT_SPEED={material.retract_speed} UNRETRACT_EXTRA_LENGTH={material.unretract_extra_length} UNRETRACT_SPEED={material.unretract_speed}
    {% endif %}
    SET_PRESSURE_ADVANCE ADVANCE={material.pressure_advance}

    # Homing before START_PRINT movements and actions
    {% if force_homing_in_start_print %}
        G28
    {% else %}
        _CG28
    {% endif %}

    # Here is the core of the START_PRINT were we get the startprint_actions variable
    # to do the procedure in the correct order for the configured probe (or user custom override)
    {% set sp_actions = printer["gcode_macro _USER_VARIABLES"].startprint_actions %}
    {% for action in sp_actions %}
        {% if action == "bed_soak" %}
            _MODULE_HEATSOAK_BED
        {% elif action == "chamber_soak" %}
            _MODULE_HEATSOAK_CHAMBER
        {% elif action == "tilt_calib" %}
            _MODULE_TILTING
        {% elif action == "extruder_heating" %}
            _MODULE_EXTRUDER_HEATING
        {% elif action == "purge" %}
            _MODULE_PURGE
        {% elif action == "clean" %}
            _MODULE_CLEAN
        {% elif action == "z_offset" %}
            _MODULE_Z_CALIB
        {% elif action == "bedmesh" %}
            _MODULE_BED_MESH
        {% elif action == "primeline" %}
            _MODULE_PRIMELINE
        {% elif action == "extruder_preheating" %}
            _MODULE_EXTRUDER_PREHEATING
        {% elif action == "custom1" %}
            _MODULE_CUSTOM1
        {% elif action == "custom2" %}
            _MODULE_CUSTOM2
        {% elif action == "custom3" %}
            _MODULE_CUSTOM3
        {% else %}
            { action_raise_error("Unknown module called in START_PRINT! Please verify your startprint_actions variable override!") }
        {% endif %}
    {% endfor %}

    # Fine adjustement of z offset (from the slicer profile). This is used to do a custom adjustement
    # when using textured/smooth PEI sheets, or for a special material from the slicer, etc...
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1

    # Final material parameters
    SET_GCODE_OFFSET Z_ADJUST={material.additional_z_offset} MOVE=1
    {% if filter_enabled %}
        START_FILTER SPEED={material.filter_speed / 100}
    {% endif %}

    # And.... Goooo!
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="PRINTING"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_printing}
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Start printing !"
    {% endif %}

    G92 E0.0


[gcode_macro _MODULE_PRIMELINE]
gcode:
    # Set vars
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% set prime_line_x, prime_line_y = printer["gcode_macro _USER_VARIABLES"].prime_line_xy|map('float') %}
    {% set prime_line_direction = printer["gcode_macro _USER_VARIABLES"].prime_line_direction|string|upper %}
    {% set prime_line_length = printer["gcode_macro _USER_VARIABLES"].prime_line_length|float %}
    {% set prime_line_purge_distance = printer["gcode_macro _USER_VARIABLES"].prime_line_purge_distance|float %}
    {% set prime_line_flowrate = printer["gcode_macro _USER_VARIABLES"].prime_line_flowrate|float %}
    {% set klippain_ercf_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_ercf_enabled %}

    {% set max_extrude_cross_section = printer["configfile"].config["extruder"]["max_extrude_cross_section"]|float %}
    {% set filament_diameter = printer["configfile"].config["extruder"]["filament_diameter"]|float %}
    
    {% set line_height = 0.6 %}

    # We first compute the width of the prime line
    {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
    {% set line_width = purge_volume / (line_height * prime_line_length) %}

    # Then we check that the prime line cross section will not be problematic (exceeding Klipper max_extrude_cross_section)
    # or, if it's the case, we warn the user and add a correction to the length of filament to be purged
    {% if (line_height * line_width) > max_extrude_cross_section %}
        {% if verbose %}
            {action_respond_info("The prime_line_purge_distance of %.4f mm is too high and will exceed the max_extrude_cross_section!" % prime_line_purge_distance)}
        {% endif %}
        {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * prime_line_length) / (3.14159 * (filament_diameter / 2)**2) %}
        {% set purge_volume = prime_line_purge_distance * 3.14159 * (filament_diameter / 2)**2 %}
        {% set line_width = purge_volume / (line_height * prime_line_length) %}
        {% if verbose %}
            {action_respond_info("Klippain corrected the prime_line_purge_distance to %.4f mm" % prime_line_purge_distance)}
        {% endif %}
    {% endif %}

    # We then compute the height to width ratio and validate that the prime line will not be too thin
    {% if (line_height / line_width) >= 0.5 %} # TODO: validate this 1/2 ratio is good for all
        {% if verbose %}
            {action_raise_error("The prime line will be too thin and will probably not stick properly to the bed. Increase its purge distance or decrease its length! Aborting...")}
        {% endif %}
    {% endif %}

    # Finally we compute the speed to get the correct flowrate for the prime line
    {% set speed = (prime_line_flowrate / (line_height * line_width)) * 60 |float %}

    {% if klippain_ercf_enabled %}
        {% if printer.ercf.enabled %}
            {% if printer.ercf.clog_detection > 0 %}
                {% if verbose %}
                    RESPOND MSG="ERCF clog detection deactivated for the prime line"
                {% endif %}
                ERCF_TEST_CONFIG enable_clog_detection=0
            {% endif %}
        {% endif %}
    {% endif %}

    G91
    M83
    G1 Z5 F{Sz}

    # Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z{line_height} F{Sz|int / 2}

    # Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    # Prime line
    G92 E0
    {% if prime_line_direction == "X" %}
        G1 X{prime_line_x + prime_line_length} E{prime_line_purge_distance} F{speed}
    {% elif prime_line_direction == "Y" %}
        G1 Y{prime_line_y + prime_line_length} E{prime_line_purge_distance} F{speed}
    {% else %}
        { action_respond_error("Prime line direction is not valid. Choose either X or Y in the variables.cfg file!") }
    {% endif %}

    # Retract and Z-hop
    G92 E0
    G1 E-0.2 F2100
    G92 E0
    G1 Z3 F{Sz}
    M400

    {% if klippain_ercf_enabled %}
        {% if printer.ercf.enabled %}
            {% if printer.ercf.clog_detection > 0 %}
                {% if verbose %}
                    RESPOND MSG="ERCF clog detection reactivated after the prime line"
                {% endif %}
                ERCF_TEST_CONFIG enable_clog_detection={printer.ercf.clog_detection}
            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _MODULE_HEATSOAK_BED]
gcode:
    # ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% set BED_TEMP = printer["gcode_macro START_PRINT"].bed_temp %}
    {% set SOAK = printer["gcode_macro START_PRINT"].soak %}
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}

    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}

    {% if printer.heater_bed.target < (BED_TEMP - 8) %}
        # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
        # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
        {% if (CHAMBER_TEMP > 0) and filter_enabled %}
            START_FILTER SPEED=1
        {% endif %}

        # If we need a full soak (not 0 min), then move the toolhead to the center front to spread the heat using the hotend fan
        {% if SOAK > 0 %}
            G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
        {% endif %}
    
        # Put the bed temperature target and wait for the soak
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={SOAK}
    {% else %}
        HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME=0
    {% endif %}


[gcode_macro _MODULE_HEATSOAK_CHAMBER]
gcode:
    # ----- CHAMBER HEATSOAK ----------------------------------
    # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
    # If there is one, the recirculating filter is also be powered on from the previous step and kept like that to act as bed fans
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set CHAMBER_MAXTIME = printer["gcode_macro START_PRINT"].chamber_maxtime %}

    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if chamber_sensor_enabled %}
        {% if CHAMBER_TEMP > 0 %}
            {% set chamber_sensor_name = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_name %}
            {% set CURRENT_TEMP = printer["temperature_sensor " ~ chamber_sensor_name].temperature|float %}

            # We do a first test to validate that the chamber is not already at temperature before starting the soak
            {% if CURRENT_TEMP <= CHAMBER_TEMP %}
                G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}

                # Start the filter (if available) to spread the heat faster in the chamber
                {% if filter_enabled %}
                    START_FILTER SPEED=1
                {% endif %}

                # Wait for the temperature of the chamber to be reached (default max: 15min)
                HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}

                # Reset the filter status now that the chamber is at correct temperature
                {% if filter_enabled %}
                    STOP_FILTER
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _MODULE_TILTING]
gcode:
    # ----- TILTING ----------------------------------
    # Do a QGL, Z_TILT_ADJUST, or nothing depending of the machine configuration
    # The correct operation is automatically selected in the _TILT_CALIBRATE macro
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    _TILT_CALIBRATE FORCE={force_homing_in_start_print}


[gcode_macro _MODULE_EXTRUDER_HEATING]
gcode:
    # ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket (if available) or in the middle of the bed
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set klippain_ercf_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_ercf_enabled %}
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Extruder heating to print temperature..."
    {% endif %}

    _CONDITIONAL_MOVE_TO_PURGE_BUCKET
    {% if not purge_and_brush_enabled %}
        G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
    {% endif %}

    M109 S{EXTRUDER_TEMP}

    # Load intial tool in the ERCF if needed
    {% if klippain_ercf_enabled %}
        {% if printer.ercf.enabled %}
            ERCF_CHANGE_TOOL STANDALONE=1 TOOL={INITIAL_TOOL}
            _ERCF_ERROR_CHECK
        {% endif %}
    {% endif %}

    {% if purgeclean_servo_enabled %}
        _SERVO_RETRACT ITEM="purge"
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}


[gcode_macro _MODULE_PURGE]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle ontop of the purge bucket to purge some material. Keep in mind that
    # if the hotend is not at the minimal extrude temperature, it will be heated up before purging
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}

    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}

    {% if purge_and_brush_enabled %}
        PURGE TEMP={EXTRUDER_TEMP}
    {% endif %}


[gcode_macro _MODULE_CLEAN]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle on the brush and clean it. Keep in mind that it's better to do
    # it with the hotend at material temperature but you can also do it at any time if needed
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set force_homing_before_brush = printer["gcode_macro _USER_VARIABLES"].force_homing_before_brush %}

    {% if purge_and_brush_enabled %}
        {% if force_homing_before_brush %}
            G28 Z # perform homing before going to the brush to avoid a miss or crash
        {% endif %}
        CLEAN_NOZZLE
    {% endif %}


[gcode_macro _MODULE_Z_CALIB]
gcode:
    # ----- Z CALIBRATION --------------------------------
    # If auto z calibration plugin is enabled, we measure the nozzle height using the physical Z endstop probe, followed by
    # a measurement of the probe on the physical Z endstop probe, and then a measurement of the center of the bed (or mesh)
    # If it's a TAP probe or inductive probe or no Z calibration, then it's only a G28 Z to get a correct Z offset measurement
    {% set FL_SIZE = printer["gcode_macro START_PRINT"].fl_size %}

    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES"].zcalib_plugin_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}

    {% if bed_mesh_enabled and printer.bed_mesh.profile_name == "" %}
        COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    {% endif %}

    {% if zcalib_plugin_enabled %}
        CALIBRATE_Z
    {% else %}
        G28 Z
    {% endif %}


[gcode_macro _MODULE_BED_MESH]
gcode:
    # ----- BED MESH -------------------------------------------
    # For the bed mesh, there is two possibilities depending if we use the auto z calibration plugin:
    #  - If yes, then a mesh should already be ready by a call to COMPUTE_MESH_PARAMETERS from a previous module
    #    because we already needed to use the mesh_center point as a parameter to the z calibration command
    #  - If no, then we need to use the SIZE parameter to the ADAPTIVE_BED_MESH call to do all at once now
    {% set FL_SIZE = printer["gcode_macro START_PRINT"].fl_size %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}

    {% if bed_mesh_enabled %}
        {% if status_leds_enabled %}
            STATUS_LEDS COLOR="MESHING"
        {% endif %}
        {% if verbose %}
            RESPOND MSG="Bed mesh measurement..."
        {% endif %}

        {% set mesh_ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
        {% if mesh_ready %}
            ADAPTIVE_BED_MESH
        {% else %}
            ADAPTIVE_BED_MESH SIZE={FL_SIZE}
        {% endif %}
    {% endif %}


[gcode_macro _MODULE_EXTRUDER_PREHEATING]
gcode:
    # Preheat the nozzle to safe probing temperature.
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}
    {% if verbose %}
        RESPOND MSG="Pre-heating the nozzle to a safe temperature..."
    {% endif %}

    M109 S{safe_extruder_temp}

    {% if verbose %}
        RESPOND MSG="Extruder at safe temperature of {safe_extruder_temp} degrees"
    {% endif %}


[gcode_macro _MODULE_CUSTOM1]
gcode:
    # ---- CUSTOM Macro section
    # this section is reserved for personal customized start actions, which can be combined with all other start actions
    # in order to use this, create a new macro in overrides.cfg
    # [gcode_macro _MODULE_CUSTOM1]
    # gcode:
    #   ## Your custom code here


[gcode_macro _MODULE_CUSTOM2]
gcode:
    # ---- CUSTOM Macro section
    # this section is reserved for personal customized start actions, which can be combined with all other start actions
    # in order to use this, create a new macro in overrides.cfg
    # [gcode_macro _MODULE_CUSTOM2]
    # gcode:
    #   ## Your custom code here


[gcode_macro _MODULE_CUSTOM3]
gcode:
    # ---- CUSTOM Macro section
    # this section is reserved for personal customized start actions, which can be combined with all other start actions
    # in order to use this, create a new macro in overrides.cfg
    # [gcode_macro _MODULE_CUSTOM3]
    # gcode:
    #   ## Your custom code here
