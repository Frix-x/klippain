[gcode_macro START_PRINT]
description: Machine heatup procedure before starting a print
variable_bed_temp: 0
variable_extruder_temp: 0
variable_z_adjust: 0
variable_soak: 0
variable_chamber_temp: 0
variable_chamber_maxtime: 0
variable_initial_tool: 0
variable_material: "XXX"
variable_fl_size: "0_0_0_0"
gcode:
    # Get all the parameters passed from the slicer
    {% set BED_TEMP = params.BED_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_bed_temp)|float %} # Extruder temperature
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %} # Bed temperature
    {% set Z_ADJUST = params.Z_ADJUST|default(0)|float %}  # Optionnal Z adjustement from the slicer profile (ex. use it if you have textured vs smooth slicer profiles) 
    {% set SOAK = params.SOAK|default(printer["gcode_macro _USER_VARIABLES"].print_default_soak)|int %} # Heatsoak time of the bed in minutes
    {% set CHAMBER_TEMP = params.CHAMBER|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_temp)|int %} # Chamber temperature setpoint
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(printer["gcode_macro _USER_VARIABLES"].print_default_chamber_max_heating_time)|int %} # Chamber heatsoak timeout in minutes
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %} # Initial tool (for the ERCF initialization)
    {% set MATERIAL = params.MATERIAL|default(printer["gcode_macro _USER_VARIABLES"].print_default_material)|string %} # Material type set in the slicer
    {% set FL_SIZE = params.SIZE|default("0_0_0_0")|string %} # Get bounding box of the first layer for the adaptive bed mesh

    # Set the variables to be used in all the modules based on the slicer parameters
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=bed_temp VALUE={BED_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_temp VALUE={EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=z_adjust VALUE={Z_ADJUST}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=soak VALUE={SOAK}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_temp VALUE={CHAMBER_TEMP}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=chamber_maxtime VALUE={CHAMBER_MAXTIME}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_tool VALUE={INITIAL_TOOL}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=material VALUE='"{MATERIAL}"'
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=fl_size VALUE='"{FL_SIZE}"'

    # Get all the config options and configurations for this macro
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set light_enabled = printer["gcode_macro _USER_VARIABLES"].light_enabled %}
    {% set light_intensity_start_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_start_print %}
    {% set light_intensity_printing = printer["gcode_macro _USER_VARIABLES"].light_intensity_printing %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    {% set ercf_enabled = printer["gcode_macro _USER_VARIABLES"].ercf_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}

    # --------------------------------
    # Let's do the START_PRINT actions
    # --------------------------------
    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="BUSY"
    {% endif %}
    
    {% if light_enabled %}
        LIGHT_ON S={light_intensity_start_print}
    {% endif %}

    {% if ercf_enabled %}
        {% if verbose %}
            RESPOND MSG="ERCF Servo Up"
        {% endif %}
        ERCF_SERVO_UP
    {% endif %}

    CLEAR_PAUSE

    {% if bed_mesh_enabled %}
        BED_MESH_CLEAR
    {% endif %}

    SET_GCODE_OFFSET Z=0
    M221 S100
    M220 S100
    G90
    M83

    {% if force_homing_in_start_print %}
        G28
    {% else %}
        _CG28
    {% endif %}

    # Here is the core of the START_PRINT were we get the startprint_actions variable
    # to do the procedure in the correct order for the configured probe (or user custom override)
    {% set sp_actions = printer["gcode_macro _USER_VARIABLES"].startprint_actions %}
    {% for action in sp_actions %}
        {% if action == "bed_soak" %}
            _MODULE_HEATSOAK_BED
        {% elif action == "chamber_soak" %}
            _MODULE_HEATSOAK_CHAMBER
        {% elif action == "tilt_calib" %}
            _MODULE_TILTING
        {% elif action == "extruder_heating" %}
            _MODULE_EXTRUDER_HEATING
        {% elif action == "purge" %}
            _MODULE_PURGE
        {% elif action == "clean" %}
            _MODULE_CLEAN
        {% elif action == "z_offset" %}
            _MODULE_Z_CALIB
        {% elif action == "bedmesh" %}
            _MODULE_BED_MESH
        {% elif action == "material" %}
            _MODULE_MATERIAL
        {% elif action == "primeline" %}
            _MODULE_PRIMELINE
        {% else %}
            { action_raise_error("Unknown module called in START_PRINT! Please verify your startprint_actions variable override!") }
        {% endif %}
    {% endfor %}


    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="PRINTING"
    {% endif %}

    {% if light_enabled %}
        LIGHT_ON S={light_intensity_printing}
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Start printing !"
    {% endif %}

    G92 E0.0


[gcode_macro _MODULE_PRIMELINE]
gcode:
    # Set vars
    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set prime_line_x, prime_line_y = printer["gcode_macro _USER_VARIABLES"].prime_line_xy|map('float') %}

    G91
    M83
    G1 Z5 F{Sz}

    ; Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F{St}
    G1 Z0.3 F{Sz|int / 2}

    ; Add pressure in the nozzle
    G92 E0
    G1 E18 F300

    ; Prime line
    G92 E0
    G1 Y{prime_line_y + 80} E10 F2500
    G92 E0
    G1 Y{prime_line_y + 130} E5 F1500

    ; Retract and Z-hop
    G92 E0
    G1 Z2.0 E-0.1 F{Sz}
    G92 E0
    G1 Z5 F{Sz}


[gcode_macro _MODULE_HEATSOAK_BED]
gcode:
    # ----- BED HEATSOAK -------------------------------------
    # Heatsoak the bed if SOAK time is set and bed is not already warming up to the correct temperature (+-8Â°C).
    # We make the assumption that the soak is not needed if the bed is already at the correct target.
    # We also use the recirculating filter under the bed (if available) at full power to spread the heat
    # during the heatsoak if a specific temperature need to be reached.
    {% set BED_TEMP = printer["gcode_macro START_PRINT"].bed_temp %}
    {% set SOAK = printer["gcode_macro START_PRINT"].soak %}
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}

    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}
    
    G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}

    # If the machine is equiped by a chamber temperature sensor and a recirculating filter (check is automatic under the hood),
    # then we look if a specific chamber temperature is needed and we power on the recirculating filter to spread the heat
    {% if (CHAMBER_TEMP > 0) and filter_enabled %}
        START_FILTER SPEED=1
    {% endif %}

    # Put the bed temperature target and wait for the soak
    HEATSOAK_BED TEMP={BED_TEMP} SOAKTIME={ SOAK if (SOAK > 0) and (printer.heater_bed.target < (BED_TEMP - 8)) else 0 }


[gcode_macro _MODULE_HEATSOAK_CHAMBER]
gcode:
    # ----- CHAMBER HEATSOAK ----------------------------------
    # If a setpoint is defined and a sensor available, then we wait to reach the chamber temperature (with a timeout in case it's winter...)
    # We heat up the extruder a little bit to speed up the process by using the hotend fan. If there is one, the recirculating filter
    # is also be powered on from the previous step and kept like that to act as bed fans
    {% set CHAMBER_TEMP = printer["gcode_macro START_PRINT"].chamber_temp %}
    {% set CHAMBER_MAXTIME = printer["gcode_macro START_PRINT"].chamber_maxtime %}

    {% set chamber_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].chamber_temperature_sensor_enabled %}
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}

    {% if chamber_sensor_enabled %}
        {% if CHAMBER_TEMP > 0 %}
            # Start the filter (if available) to spread the heat faster in the chamber
            {% if filter_enabled %}
                START_FILTER SPEED=1
            {% endif %}

            # Heat the hotend to the safe temperature to spread some heat as well
            M109 S{safe_extruder_temp}
            # Wait for the temperature of the chamber to be reached (default max: 15min)
            HEATSOAK_CHAMBER TEMP={CHAMBER_TEMP} MAXTIME={CHAMBER_MAXTIME}

            # Reset the filter status now that the chamber is at correct temperature
            {% if filter_enabled %}
                STOP_FILTER
            {% endif %}
        {% endif %}
    {% endif %}


[gcode_macro _MODULE_TILTING]
gcode:
    # ----- TILTING ----------------------------------
    # Do a QGL, Z_TILT_ADJUST, or nothing depending of the machine configuration
    # The correct operation is automatically selected in the _TILT_CALIBRATE macro
    {% set force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].force_homing_in_start_print %}
    _TILT_CALIBRATE FORCE={force_homing_in_start_print}


[gcode_macro _MODULE_EXTRUDER_HEATING]
gcode:
    # ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket (if available)
    # or in the middle of the bed and wait 30s to let the nozzle dilate and stabilize
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set ercf_enabled = printer["gcode_macro _USER_VARIABLES"].ercf_enabled %}
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}

    {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
    {% set Px, Py, Pz = printer["gcode_macro _USER_VARIABLES"].purge_bucket_xyz|map('float') %}

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}

    {% if status_leds_enabled %}
        STATUS_LEDS COLOR="HEATING"
    {% endif %}

    _CONDITIONAL_MOVE_TO_PURGE_BUCKET
    {% if not purge_and_brush_enabled %}
        G0 X{max_x|int / 2} Y{max_y|int / 3} Z50 F{St}
    {% endif %}

    M109 S{EXTRUDER_TEMP}
    G4 P{60000 * 0.5}

    {% if purgeclean_servo_enabled %}
        _SERVO_RETRACT ITEM="purge"
    {% endif %}

    # Load intial tool if needed
    {% if ercf_enabled %}
        ERCF_RESET_STATS
        ERCF_CHANGE_TOOL STANDALONE=1 TOOL={INITIAL_TOOL}
        _DO_ERROR_ERCF_PAUSE
    {% endif %}

    {% if verbose %}
        RESPOND MSG="Extruder temperature OK"
    {% endif %}


[gcode_macro _MODULE_PURGE]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle ontop of the purge bucket to purge some material. Keep in mind that
    # if the hotend is not at the minimal extrude temperature, it will be heated up before purging
    {% set EXTRUDER_TEMP = printer["gcode_macro START_PRINT"].extruder_temp %}
    
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}

    {% if purge_and_brush_enabled %}
        PURGE TEMP={EXTRUDER_TEMP}
    {% endif %}


[gcode_macro _MODULE_CLEAN]
gcode:
    # ----- PURGE AND CLEAN ---------------------------------
    # Just put the nozzle on the brush and clean it. Keep in mind that it's better to do
    # it with the hotend at material temperature but you can also do it at any time if needed
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set force_homing_before_brush = printer["gcode_macro _USER_VARIABLES"].force_homing_before_brush %}

    {% if purge_and_brush_enabled %}
        {% if force_homing_before_brush %}
            G28 Z # perform homing before going to the brush to avoid a miss or crash
        {% endif %}
        CLEAN_NOZZLE
    {% endif %}


[gcode_macro _MODULE_Z_CALIB]
gcode:
    # ----- Z CALIBRATION --------------------------------
    # If auto z calibration plugin is enabled, we measure the nozzle height using the physical Z endstop probe, followed by
    # a measurement of the probe on the physical Z endstop probe, and then a measurement of the center of the bed (or mesh)
    # If it's a TAP probe or inductive probe or no Z calibration, then it's only a G28 Z to get a correct Z offset measurement
    {% set FL_SIZE = printer["gcode_macro START_PRINT"].fl_size %}
    {% set Z_ADJUST = printer["gcode_macro START_PRINT"].z_adjust %}

    {% set zcalib_plugin_enabled = printer["gcode_macro _USER_VARIABLES"].zcalib_plugin_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}

    {% if bed_mesh_enabled and printer.bed_mesh.profile_name == "" %}
        COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    {% endif %}

    {% if zcalib_plugin_enabled %}
        CALIBRATE_Z
    {% else %}
        G28 Z
    {% endif %}

    # Fine adjustement of z offset (from the slicer profile). This is used to do a custom adjustement
    # when using textured/smooth PEI sheets, or for a special material, etc...
    SET_GCODE_OFFSET Z_ADJUST={Z_ADJUST} MOVE=1


[gcode_macro _MODULE_BED_MESH]
gcode:
    # ----- BED MESH -------------------------------------------
    # For the bed mesh, there is two possibilities depending if we use the auto z calibration plugin:
    #  - If yes, then a mesh should already be ready by a call to COMPUTE_MESH_PARAMETERS from a previous module
    #    because we already needed to use the mesh_center point as a parameter to the z calibration command
    #  - If no, then we need to use the SIZE parameter to the ADAPTIVE_BED_MESH call to do all at once now
    {% set FL_SIZE = printer["gcode_macro START_PRINT"].fl_size %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}

    {% if bed_mesh_enabled %}
        {% if status_leds_enabled %}
            STATUS_LEDS COLOR="MESHING"
        {% endif %}
        {% if verbose %}
            RESPOND MSG="Bed mesh measurement..."
        {% endif %}

        {% set mesh_ready = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].ready %}
        {% if mesh_ready %}
            ADAPTIVE_BED_MESH
        {% else %}
            ADAPTIVE_BED_MESH SIZE={FL_SIZE}
        {% endif %}
    {% endif %}


[gcode_macro _MODULE_MATERIAL]
gcode:
    # ----- MATERIAL PARAMETERS --------------------------------
    # Material dependant parameters like PA, firmware retraction, Z_offset, etc...
    {% set MATERIAL = printer["gcode_macro START_PRINT"].material %}

    {% set firmware_retraction_enabled = printer["gcode_macro _USER_VARIABLES"].firmware_retraction_enabled %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}

    RESPOND MSG="Material: {MATERIAL}"
    {% if MATERIAL == "PLA" %}
        SET_PRESSURE_ADVANCE ADVANCE=0.0525
        {% if firmware_retraction_enabled %}
            SET_RETRACTION RETRACT_LENGTH=0.75 RETRACT_SPEED=40 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=30
        {% endif %}

    {% elif MATERIAL == "PET" %}
        SET_PRESSURE_ADVANCE ADVANCE=0.0650
        SET_GCODE_OFFSET Z_ADJUST=0.010 MOVE=1
        {% if firmware_retraction_enabled %}
            SET_RETRACTION RETRACT_LENGTH=1.4 RETRACT_SPEED=30 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=20
        {% endif %}

    {% elif MATERIAL == "ABS" %}
        SET_PRESSURE_ADVANCE ADVANCE=0.0480
        {% if firmware_retraction_enabled %}
            SET_RETRACTION RETRACT_LENGTH=0.5 RETRACT_SPEED=40 UNRETRACT_EXTRA_LENGTH=0 UNRETRACT_SPEED=30
        {% endif %}
        {% if filter_enabled %}
            START_FILTER SPEED=0.8
        {% endif %}
    {% endif %}
