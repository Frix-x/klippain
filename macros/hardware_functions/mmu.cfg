## Custom MMU Macros used in the START_PRINT

[gcode_macro _KLIPPAIN_MMU_INIT]
description: macro use in start_print for initialisation of MMU for the print.
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set mmu_force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].mmu_force_homing_in_start_print %}

    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}
    {% set CHECK_GATES = printer["gcode_macro START_PRINT"].check_gates %}
    {% set TOOLS_USED = printer["gcode_macro START_PRINT"].tools_used %}
    {% set SYNC_MMU_EXTRUDER = printer["gcode_macro START_PRINT"].sync_mmu_extruder %}

    # if MMU is enable. MMU pre-initialisation for the print.
    {% if printer.mmu.enabled %}
        {% if printer.mmu.print_start_detection|int == 0 %} # change MMU State to simulate start printing state to avoid checking mmu errors. otherwise mmu pause in case of error only occur at the end of start_print!!!
            _MMU_PRINT_START
        {% endif %}
        {% if printer.mmu.tool|int != -2 %}                 # If not bypass gate
            {% if TOOLS_USED == "" %}                       # AND if TOOLS_USED slicer parameter is not used (for info)
                {% if verbose %}
                    RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> You should consider using the TOOLS_USED=!referenced_tools! parameter in the G-code start of the slicer.</span>"
                {% endif %}
            {% elif TOOLS_USED == "!referenced_tools!" %}   # OR if error on TOOLS_USED slicer parameter (for info)
                {% if verbose %}
                    RESPOND PREFIX='MMU info:' MSG="<span class="error"--text> There is a problem with your TOOLS_USED parameter in your slice gcode : TOOLS_USED={TOOLS_USED}. You must check your gcode file.</span>"
                {% endif %}
            {% endif %}

            {% if mmu_force_homing_in_start_print or printer.mmu.is_homed == 0 %}         # Home MMU if necessary AND pre select initial tool gate AND park toolhead.
                M118 MMU must be homed
                PARK E=0
                MMU_HOME TOOL={INITIAL_TOOL} FORCE_UNLOAD=1
            {% endif %}

            {% if CHECK_GATES %}                            # Check if gates are available. If CHECK_GATES is enable in slicer start_print G_code or by default use the value in your variables.cfg.
                {% if TOOLS_USED != "!referenced_tools!" %} # check if slicer TOOLS_USED is correct format
                    {% if TOOLS_USED and printer.mmu.tool|string != TOOLS_USED %}                                                                       # In case of multi filaments prints with correct TOOLS_USED slicer parameter
                        {% if verbose %}
                            RESPOND PREFIX='MMU info:' MSG="<span class="success"--text> You plan to do a Multi Filaments print. The Tool(s): {TOOLS_USED} will be checked in order to limit the risk of error.</span>"
                        {% endif %}
                        MMU_EJECT                           # Eject in case bad tool already loaded
                        MMU_CHECK_GATE TOOLS={TOOLS_USED}   # Check if the g_code file gates are availables.
                        MMU_SELECT TOOL={INITIAL_TOOL}
                    {% elif printer.mmu.tool|int != INITIAL_TOOL or (printer.mmu.tool|int == INITIAL_TOOL and printer.mmu.filament != "Loaded") %}      # In case of prints without correct TOOLS_USED slicer parameter
                        {% if verbose %}
                            {% if printer.mmu.tool|int != INITIAL_TOOL %}                                                                               # AND if MMU selected tool different from slicer INITIAL_TOOL (for Info)
                                RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> Only T{INITIAL_TOOL} will be checked (or T0 by default)! You should consider adding the TOOLS_USED=!referenced_tools! parameter in the G-code start of the slicer.</span>"
                            {% elif printer.mmu.tool|int == INITIAL_TOOL and printer.mmu.filament != "Loaded" %}                                        # OR if MMU selected tool is the same as slicer INITIAL_TOOL BUT filament is not loaded in toolhead (for Info)
                                RESPOND PREFIX='Config info:' MSG="<span class="success"--text> The initial tool T{INITIAL_TOOL} is selected but the filament is not loaded. To prevent possible error in case the initial tool is marked EMPTY in HHv2, Initial tool will be checked!</span>"
                            {% endif %}
                        {% endif %}
                        MMU_EJECT                           # Eject in case bad tool already loaded
                        MMU_CHECK_GATE TOOLS={INITIAL_TOOL} # Check only if the initial tool is available (default tool 0).
                    {% endif %}
                {% else %}                                                # In case of error in HHv2 moonraker gcode preprocessor or Happy_Hare gcode pre-processor is disabled for TOOLS_USED slicer parameter.
                    {% if verbose %}
                        RESPOND PREFIX='MMU info:' MSG="<span class="error"--text> Happy_Hare gcode pre-processor is disabled or there is a problem with your TOOLS_USED parameter in your slice gcode : TOOLS_USED={TOOLS_USED}. You must check your gcode file. CHECK_GATES will be bypass but all gates will be marked as availables to prevent error!</span>"
                    {% endif %}
                    {% set gate_str = printer.mmu.ttg_map|join(',') %}    #  Reset the state status (Available or Empty) for all the mmu gates to ovoid error after manualy reload empty gate without update mmu gates status. In case of HHv2 moonraker gcode preprocessor error
                    MMU_GATE_MAP GATES={gate_str} AVAILABLE=-1
                {% endif %}
            {% else %}                                          # If CHECK_GATES is not define in slicer gcode or in klippain parameters
                {% if verbose %}
                    RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> You should consider using the MMU_CHECK_GATES by setting variable_mmu_check_gates_on_start_print to True in your Klippain variables.cfg file or using the MMU_CHECK_GATES=1 parameter in the G-code start of the slicer.</span>"
                {% endif %}
                {% if printer.mmu.tool|int != INITIAL_TOOL %}   # AND In case of MMU selected tool different from slicer INITIAL_TOOL
                    MMU_HOME FORCE_UNLOAD=1 TOOL={INITIAL_TOOL}
                {% endif %}
            {% endif %}
            {% if printer['gcode_macro _USER_VARIABLES'].mmu_check_errors_on_start_print and printer.mmu.print_start_detection|int == 0 %}  # First instance of MMU error check (if enabled...). To stop the START_PRINT macro process earlier.
                _MMU_ERROR_CHECK1
            {% endif %}
        {% else %}
            {% if printer['gcode_macro _USER_VARIABLES'].mmu_check_errors_on_start_print and printer.mmu.print_start_detection|int == 0 %}  # Check for MMU error with bypass (if enabled...). To stop the START_PRINT macro process earlier.
                _MMU_ERROR_CHECK1
            {% endif %}
        {% endif %}

        {% if printer.configfile.config.mmu.sync_to_extruder == 0 and printer.mmu.tool|int != -2 %}    # Let make choise in start_print to override HH (in case is disabled) sync gear and extruder (and disabled if bypass is used)
            {% if SYNC_MMU_EXTRUDER == 1 %}
                MMU_TEST_CONFIG sync_to_extruder=1
                {% if verbose %}
                    M118 MMU gear motor and extruder are synchronized during print
                {% endif %}
            {% elif verbose %}
                M118 MMU gear motor and extruder are not synchronized during print
            {% endif %}
        {% elif printer.mmu.tool|int == -2 %}
            MMU_TEST_CONFIG sync_to_extruder=0
            {% if verbose %}
                M118 Bypass used so gear motor and extruder are not synchronized during print
            {% endif %}
        {% elif verbose %}
            M118 MMU gear motor and extruder are synchronized during print
        {% endif %}

        {% if printer.mmu.tool|int != -2 %}             # In case of MMU used (not Bypass...)
            {% if printer.mmu.filament != "Loaded" %}   # Pre-load MMU Gates if filament is not already loaded
                {% if printer.mmu.tool|int != INITIAL_TOOL %}
                    MMU_SELECT TOOL={INITIAL_TOOL}
                    MMU_PRELOAD                     # Pre-load MMU gate for initial tool if not already loaded (default T0).
                {% endif %}
            {% else %}
                {% if printer.mmu.tool|int != INITIAL_TOOL %}
                    MMU_EJECT                       # Eject bad tool
                    MMU_SELECT TOOL={INITIAL_TOOL}  # Select MMU gate for initial tool (default T0).
                    MMU_PRELOAD                     # Pre-load MMU gate for initial tool(default T0).
                {% endif %}
            {% endif %}
        {% endif %}
        {% if printer.mmu.print_start_detection|int == 0 %}     # Reset MMU State to initial state if options are selected
            _MMU_PRINT_END STATE=standby
        {% endif %}
    {% endif %}

[gcode_macro _KLIPPAIN_MMU_LOAD_INITIAL_TOOL]
description: macro use in start_print for loading filament.
gcode:
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% if printer.mmu.enabled %}
        {% if printer.mmu.print_start_detection|int == 0 %}     # change MMU State to simulate start printing state to avoid checking mmu errors. otherwise mmu pause in case of error only occur at the end of start_print!!!
            _MMU_PRINT_START
        {% endif %}
        {% if printer.mmu.tool|int != -2 %}                     # If not bypass load INITIAL_TOOL (if INITIAL_TOOL is already loaded, nothing is done...)
            MMU_CHANGE_TOOL TOOL={INITIAL_TOOL} STANDALONE=1
        {% else %}                                              # If Bypass, try to load filament previously manualy inserted at the entry of extruder to the nozzle.
            MMU_LOAD             
        {% endif %}
        {% if printer['gcode_macro _USER_VARIABLES'].mmu_check_errors_on_start_print and printer.mmu.print_start_detection|int == 0 %}  # second instance of MMU error check (if enabled...). To stop the START_PRINT macro process earlier.
            _MMU_ERROR_CHECK2
        {% endif %}
        {% if printer.mmu.print_start_detection|int == 0 %}     # Reset MMU State to initial state if options are selected
            _MMU_PRINT_END STATE=standby
        {% endif %}
    {% endif %}

[gcode_macro _KLIPPAIN_MMU_SET_CLOGDETECTION]
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set clog_detection = params.STATE|int %}

    {% if printer.mmu.enabled %}
        {% if printer.mmu.clog_detection > 0 and printer.configfile.config.mmu.sync_to_extruder == 0 %}
            {% if verbose %}
                RESPOND MSG="MMU clog detection deactivated for the prime line"
            {% endif %}
            MMU_TEST_CONFIG enable_clog_detection={clog_detection}
        {% endif %}
    {% endif %}

[gcode_macro _MMU_PRINT_START]
description: Map _MMU_PRINT_START
rename_existing: _BASE_MMU_PRINT_START
gcode:
    {% if printer.mmu.enabled and printer.mmu.print_start_detection|int == 0 %}
        _BASE_MMU_PRINT_START
    {% endif %}


## Custom macros to raise an error during the START_PRINT and stop it in case of an MMU error
[gcode_macro _MMU_ERROR_CHECK1]
description: script to stop start_print if mmu error is detected
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if printer.mmu.print_state|string == "pause_locked" %}
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
        {% elif printer.mmu.is_locked %}          # will be depreciated
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif verbose %}
        {% if printer.mmu.tool|int == -1 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="warning"--text> No tool selected! </span>"
        {% elif printer.mmu.tool|int == -2 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="success"--text> Bypass selected</span>"
        {% elif printer.mmu.filament == "Loaded" %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="success"--text> T{printer.mmu.tool} already loaded</span>"
        {% else %}
            RESPOND PREFIX='mmu tool:' MSG="<span class="success"--text> Preload T{printer.mmu.tool} OK</span>"
        {% endif %}
    {% endif %}

[gcode_macro _MMU_ERROR_CHECK2]
description: second script to stop start_print if mmu error is detected
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% if printer.mmu.print_state|string == "pause_locked" %}
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif printer.mmu.is_locked %}          # will be depreciated
        {action_raise_error("MMU is locked! please check and use RESUME to unlock MMU then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif printer.mmu.filament != "Loaded" %}
       {action_raise_error("Filament is not loaded! Check then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif printer.mmu.tool|int != -2 and printer.mmu.tool|int != INITIAL_TOOL %}
        {action_raise_error("Initial tool ({INITIAL_TOOL}) and MMU tool ({printer.mmu.tool}) are different!!! Check then restart the print. PS: Sorry but it's actually the only way to stop the START_PRINT gcode!!!")}
    {% elif verbose %}
        {% if printer.mmu.tool|int == -1 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="warning"--text> something get wrong! No tool active! </span>"
        {% elif printer.mmu.tool|int == -2 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="success"--text> Bypass selected and loaded</span>"
        {% else %}
            RESPOND PREFIX='mmu tool:' MSG="<span class="success"--text> T{printer.mmu.tool} ready</span>"
        {% endif %}
    {% endif %}


## Custom macros for MMU in addition to that in HHv2

[gcode_macro MMU_SET_TOOL_TO_GATE]
description: Macro to remap single Tool to Gate.
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set TOOL = params.TOOL_TO_REMAP|default(0)|int %}
    {% set GATE = params.GATE_TO_LINK|default(0)|int %}

    {% if printer.mmu.enabled %}
        MMU_REMAP_TTG TOOL={TOOL} GATE={GATE}
        {% if verbose %}
            RESPOND PREFIX='Info:' MSG="<span class="success"--text> T{TOOL} is now linked to MMU Gate {GATE}</span>"
        {% endif %}
    {% else %}
        RESPOND PREFIX='Info:' MSG="<span class="error"--text> MMU is disabled!</span>"
    {% endif %}

[gcode_macro MMU_SET_GATE_SPOOL_ID]
description: Macro to set Spoolman Spool ID linked to a Gate.
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set spoolman_enabled = printer["gcode_macro _USER_VARIABLES"].spoolman_enabled %}
    {% set GATE = params.GATE|int %}
    {% set SPOOL_ID = params.SPOOL_ID|int %}

    {% if spoolman_enabled %}
        {% if printer.mmu.enabled %}
            MMU_GATE_MAP GATE={GATE} SPOOLID={SPOOL_ID}
            {% if verbose %}
                RESPOND PREFIX='Info:' MSG="<span class="success"--text> Gate {GATE} used Spoolman Spool ID: {SPOOL_ID}</span>"
            {% endif %}
        {% else %}
            RESPOND PREFIX='Info:' MSG="<span class="error"--text> MMU is disabled!</span>"
        {% endif %}
    {% else %}
        RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> Spoolman disabled"
    {% endif %}

[gcode_macro _MMU_SET_SPOOL_ID]
description: Select and set Spoolman active spool in some case not unmanaged by HHv2. HHv2 change spoolman ID on the other toolchange.      # Currently not used because HH manages Spoolman better and better. Can maybe used later...
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set spoolman_enabled = printer["gcode_macro _USER_VARIABLES"].spoolman_enabled %}
    {% set TOOL_ID = params.TOOL|default(0)|int %}
    {% set BYPASS_ID = printer["gcode_macro START_PRINT"].initial_tool %}

    {% if spoolman_enabled %}
        {% if printer.mmu.enabled %}
            {% if printer.mmu.tool|int == -2 %}
                SET_ACTIVE_SPOOL ID={BYPASS_ID}
                {% if verbose %}
                    RESPOND PREFIX='Info:' MSG="<span class="success"--text> Bypass selected with Spool ID {BYPASS_ID}</span>"
                {% endif %}
            {% elif TOOL_ID >= 0 %} # protect against bypass or unknown tool
                {% set GATE_NUMBER = printer.save_variables.variables.mmu_state_tool_to_gate_map[TOOL_ID] %}
                {% if GATE_NUMBER >= 0 %} # protect against unknown gate
                    {% set TOOL_SPOOL_ID = printer.mmu.gate_spool_id[GATE_NUMBER] %}
                    SET_ACTIVE_SPOOL ID={TOOL_SPOOL_ID}
                    {% if verbose %}
                        RESPOND PREFIX='Info:' MSG="<span class="success"--text> T{TOOL_ID} is in Gate {GATE_NUMBER} with Spool ID {TOOL_SPOOL_ID}</span>"
                    {% endif %}
                {% else %}
                    RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> T{TOOL_ID} is not mapped to any gate."
                {% endif %}
            {% else %}
                RESPOND PREFIX='Config info:' MSG="<span class="error"--text> Invalid tool number: {TOOL_ID}"
            {% endif %}
        {% else %}
            RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> Spoolman is enabled but MMU is disabled."
        {% endif %}
    {% else %}
        RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> Spoolman disabled"
    {% endif %}

[gcode_macro _MMU_CHECK_STATE]
description: hidden script: display some mmu parameters
gcode:
    RESPOND PREFIX=<prefix> MSG="<span class="accent"--text> Klippain with Happy_Hare_V2.x support</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.print_state : {printer.mmu.print_state}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.is_locked : {printer.mmu.is_locked}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.tool : {printer.mmu.tool}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.print_start_detection : {printer.mmu.print_start_detection}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.clog_detection : {printer.mmu.clog_detection}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.filament : {printer.mmu.filament}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.filament_pos : {printer.mmu.filament_pos}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.selector_touch_enable : {printer.configfile.config.mmu.selector_touch_enable}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.sync_drive : {printer.mmu.sync_drive}</span>"
