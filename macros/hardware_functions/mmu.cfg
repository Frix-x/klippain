## Custom MMU Macros used in Klippain
## Automatically included when an MMU is defined in printer.cfg

[gcode_macro _KLIPPAIN_MMU_INIT]
description: Internal macro to initialize the MMU during the START_PRINT sequence
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set mmu_force_homing_in_start_print = printer["gcode_macro _USER_VARIABLES"].mmu_force_homing_in_start_print %}

    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}
    {% set CHECK_GATES = printer["gcode_macro START_PRINT"].check_gates %}
    {% set TOOLS_USED = printer["gcode_macro START_PRINT"].tools_used %}
    {% set SYNC_MMU_EXTRUDER = printer["gcode_macro START_PRINT"].sync_mmu_extruder %}

    {% if printer.mmu.enabled %}
        # Manually changing the MMU state to start print (see https://github.com/Frix-x/klippain/blob/main/docs/mmu.md#early-check-errors-during-start_print)
        {% if printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_START
        {% endif %}

        # Park the toolhead to get on a safe place (without retracting the filament)
        PARK E=0

        # If the MMU is not in bypass mode
        {% if printer.mmu.tool|int != -2 %}
            # Home the MMU if necessary and pre select the initial tool
            {% if mmu_force_homing_in_start_print or printer.mmu.is_homed == 0 %}
                MMU_HOME TOOL={INITIAL_TOOL} FORCE_UNLOAD=1
            {% endif %}

            # If we need to check the gates (specified by the slicer or the Klippain variable)
            {% if CHECK_GATES %}
                {% if TOOLS_USED != "!referenced_tools!" %}

                    # If we are in the case of a multi-filament print
                    {% if TOOLS_USED and printer.mmu.tool|string != TOOLS_USED %}
                        {% if verbose %}
                            RESPOND PREFIX='MMU info:' MSG="<span class="success"--text> You are planning a multi-filament print. The tool(s): {TOOLS_USED} will be checked to limit the risk of errors.</span>"
                        {% endif %}

                        # First eject in case a bad tool is already loaded, then check the gates and select the initial tool
                        MMU_EJECT
                        MMU_CHECK_GATE TOOLS={TOOLS_USED}
                        MMU_SELECT TOOL={INITIAL_TOOL}

                    # Else if the TOOL_USED parameter is not valid... We can still start the print but only check the initial tool
                    {% elif printer.mmu.tool|int != INITIAL_TOOL or (printer.mmu.tool|int == INITIAL_TOOL and printer.mmu.filament != "Loaded") %}
                        {% if verbose %}
                            {% if printer.mmu.tool|int != INITIAL_TOOL %}
                                RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> Only T{INITIAL_TOOL} will be checked! You should consider using TOOLS_USED=!referenced_tools! in the custom start gcode of your slicer</span>"
                            {% elif printer.mmu.tool|int == INITIAL_TOOL and printer.mmu.filament != "Loaded" %}
                                RESPOND PREFIX='Config info:' MSG="<span class="success"--text> T{INITIAL_TOOL} is selected but the filament is not loaded. In order to avoid a possible error if the initial tool is marked as empty in HappyHare, it will be checked!</span>"
                            {% endif %}
                        {% endif %}

                        # First eject in case a bad tool is already loaded, then check the initial tool gate
                        MMU_EJECT
                        MMU_CHECK_GATE TOOLS={INITIAL_TOOL}
                    {% endif %}
                
                # Else if there was an error in the Moonraker gcode preprocessor (TOOL_USED is still equal to "!referenced_tools!")
                {% else %}
                    {% if verbose %}
                        RESPOND PREFIX='MMU info:' MSG="<span class="error"--text> TOOLS_USED={TOOLS_USED} is likely not valid. Please check your slicer custom start gcode and verify that the HappyHare Moonraker gcode preprocessor is working! There will be no check on the gates and they will all be marked as available to avoid an error</span>"
                    {% endif %}

                    # Reset the state status (Available or Empty) for all the MMU gates to avoid an error
                    {% set gate_str = printer.mmu.ttg_map|join(',') %}
                    MMU_GATE_MAP GATES={gate_str} AVAILABLE=-1
                {% endif %}

            # Else if no check of the gates is wanted (specified by the slicer or the Klippain variable)
            {% else %}
                {% if verbose %}
                    RESPOND PREFIX='Config info:' MSG="<span class="warning"--text> No gate check requested by the user. You should consider variable_mmu_check_gates_on_start_print: True in your Klippain variables.cfg or use the MMU_CHECK_GATES=1 parameter in your slicer custom start gcode</span>"
                {% endif %}
                {% if printer.mmu.tool|int != INITIAL_TOOL %}
                    MMU_HOME FORCE_UNLOAD=1 TOOL={INITIAL_TOOL}
                {% endif %}
            {% endif %}

            # First instance of the MMU error check (if enabled...) to stop the START_PRINT sequence earlier
            {% if printer['gcode_macro _USER_VARIABLES'].mmu_check_errors_on_start_print and printer.mmu.print_start_detection|int == 0 %}
                _MMU_ERROR_CHECK1
            {% endif %}
        
        # Else if the MMU is in bypass mode, we just check for an error
        {% else %}
            # First instance of the MMU error check (if enabled...) while in bypass mode to stop the START_PRINT sequence earlier
            {% if printer['gcode_macro _USER_VARIABLES'].mmu_check_errors_on_start_print and printer.mmu.print_start_detection|int == 0 %}
                _MMU_ERROR_CHECK1
            {% endif %}
        {% endif %}

        # Set the sync_to_extruder mode of HH if wanted by the user for the print (set from the slicer custom start gcode)
        {% if printer.configfile.config.mmu.sync_to_extruder == 0 and printer.mmu.tool|int != -2 %}
            {% if SYNC_MMU_EXTRUDER == 1 %}
                {% if verbose %}
                    RESPOND MSG="MMU gear motor will be synchronized with the extruder during the print"
                {% endif %}
                MMU_TEST_CONFIG sync_to_extruder=1
            {% endif %}

        # Force disable the sync_to_extruder mode of HH if the MMU is set in bypass mode
        {% elif (printer.configfile.config.mmu.sync_to_extruder == 1 or SYNC_MMU_EXTRUDER == 1) and printer.mmu.tool|int == -2 %}
            {% if verbose %}
                RESPOND MSG="MMU bypass mode is used so its gear motor cannot be synchronized with the extruder during the print"
            {% endif %}
            MMU_TEST_CONFIG sync_to_extruder=0
        {% endif %}

        # Preload the MMU gates if the filament is not already loaded and the MMU is set in normal mode
        {% if printer.mmu.tool|int != -2 %}
            {% if printer.mmu.filament != "Loaded" %}
                {% if printer.mmu.tool|int != INITIAL_TOOL %}
                    MMU_SELECT TOOL={INITIAL_TOOL}
                    MMU_PRELOAD
                {% endif %}
            {% else %}
                {% if printer.mmu.tool|int != INITIAL_TOOL %}
                    MMU_EJECT
                    MMU_SELECT TOOL={INITIAL_TOOL}
                    MMU_PRELOAD
                {% endif %}
            {% endif %}
        {% endif %}

        # Manually reset the MMU state to the initial state (see https://github.com/Frix-x/klippain/blob/main/docs/mmu.md#early-check-errors-during-start_print)
        {% if printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_END STATE=standby
        {% endif %}
    {% endif %}


[gcode_macro _KLIPPAIN_MMU_LOAD_INITIAL_TOOL]
description: Internal macro to load the initial filament during the START_PRINT sequence
gcode:
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% if printer.mmu.enabled %}
        # Manually changing the MMU state to start print (see https://github.com/Frix-x/klippain/blob/main/docs/mmu.md#early-check-errors-during-start_print)
        {% if printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_START
        {% endif %}

        # If the MMU is not in bypass mode, we load the initial tool if not already loaded
        {% if printer.mmu.tool|int != -2 %}
            MMU_CHANGE_TOOL TOOL={INITIAL_TOOL} STANDALONE=1
        
        # Else if in bypass mode, then manually load the filament (that was manually inserted) to the nozzle
        {% else %}
            MMU_LOAD
        {% endif %}

        # Second instance of the MMU error check (if enabled...) to stop the START_PRINT sequence earlier
        {% if printer['gcode_macro _USER_VARIABLES'].mmu_check_errors_on_start_print and printer.mmu.print_start_detection|int == 0 %}
            _MMU_ERROR_CHECK2
        {% endif %}
        # And manually reset the MMU state to the initial state (see https://github.com/Frix-x/klippain/blob/main/docs/mmu.md#early-check-errors-during-start_print)
        {% if printer.mmu.print_start_detection|int == 0 %}
            _MMU_PRINT_END STATE=standby
        {% endif %}
    {% endif %}


[gcode_macro _KLIPPAIN_MMU_SET_CLOGDETECTION]
description: Internal macro to automatically disable or re-enable MMU clog detection as needed
gcode:
    {% set clog_detection = params.STATE|int %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if printer.mmu.enabled %}
        {% if printer.mmu.clog_detection > 0 and printer.configfile.config.mmu.sync_to_extruder == 0 %}
            {% if clog_detection == 0 %}
                MMU_TEST_CONFIG enable_clog_detection={clog_detection}
                {% if verbose %}
                    RESPOND MSG="MMU clog detection automatically disabled"
                {% endif %}
            {% elif clog_detection > 0 %}
                MMU_TEST_CONFIG enable_clog_detection={clog_detection}
                {% if verbose %}
                    RESPOND MSG="MMU clog detection automatically re-enabled"
                {% endif %}
            {% endif %}
        {% endif %}
    {% endif %}


# Custom macros to check for an error on the MMU and stop the START_PRINT sequence earlier
# (see https://github.com/Frix-x/klippain/blob/main/docs/mmu.md#early-check-errors-during-start_print)
[gcode_macro _MMU_ERROR_CHECK1]
description: Internal macro to check for an error on the MMU and stop the START_PRINT sequence earlier
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if printer.mmu.print_state|string == "pause_locked" or printer.mmu.is_locked %}
        {action_raise_error("MMU is locked! Please check your MMU and use the RESUME command to unlock it. Then restart the print")}
    {% endif %}
    
    {% if verbose %}
        {% if printer.mmu.tool|int == -1 %}
            RESPOND PREFIX='MMU gate:' MSG="<span class="warning"--text> no tool selected!</span>"
        {% elif printer.mmu.tool|int == -2 %}
            RESPOND PREFIX='MMU gate:' MSG="<span class="success"--text> bypass mode selected</span>"
        {% elif printer.mmu.filament == "Loaded" %}
            RESPOND PREFIX='MMU gate:' MSG="<span class="success"--text> T{printer.mmu.tool} already loaded</span>"
        {% else %}
            RESPOND PREFIX='MMU tool:' MSG="<span class="success"--text> T{printer.mmu.tool} preloaded</span>"
        {% endif %}
    {% endif %}

[gcode_macro _MMU_ERROR_CHECK2]
description: Internal macro to check for an error on the MMU and stop the START_PRINT sequence earlier
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set INITIAL_TOOL = printer["gcode_macro START_PRINT"].initial_tool %}

    {% if printer.mmu.print_state|string == "pause_locked" or printer.mmu.is_locked %}
        {action_raise_error("MMU is locked! Please check your MMU and use the RESUME command to unlock it. Then restart the print")}
    {% elif printer.mmu.filament != "Loaded" %}
        {action_raise_error("Filament is not loaded! Please check your MMU and then restart the print")}
    {% elif printer.mmu.tool|int != -2 and printer.mmu.tool|int != INITIAL_TOOL %}
        {action_raise_error("Initial tool ({INITIAL_TOOL}) and MMU tool ({printer.mmu.tool}) are different! Please check your MMU and then restart the print")}
    {% endif %}
    
    {% if verbose %}
        {% if printer.mmu.tool|int == -1 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="warning"--text> something get wrong, no active tool!</span>"
        {% elif printer.mmu.tool|int == -2 %}
            RESPOND PREFIX='mmu gate:' MSG="<span class="success"--text> bypass mode selected and filament loaded</span>"
        {% else %}
            RESPOND PREFIX='mmu tool:' MSG="<span class="success"--text> T{printer.mmu.tool} ready</span>"
        {% endif %}
    {% endif %}

# This is just a debug macro that just print a couple of variables related to the MMU and HappyHare
[gcode_macro _MMU_CHECK_STATE]
description: Display some MMU parameters to debug it
gcode:
    RESPOND PREFIX=<prefix> MSG="<span class="accent"--text> Klippain with Happy_Hare_V2.x support in main branch</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.print_state : {printer.mmu.print_state}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.is_locked : {printer.mmu.is_locked}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.tool : {printer.mmu.tool}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.print_start_detection : {printer.mmu.print_start_detection}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.clog_detection : {printer.mmu.clog_detection}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.filament : {printer.mmu.filament}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.filament_pos : {printer.mmu.filament_pos}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.selector_touch_enable : {printer.configfile.config.mmu.selector_touch_enable}</span>"
    RESPOND PREFIX=<prefix> MSG="<span class="success"--text> mmu.sync_drive : {printer.mmu.sync_drive}</span>"
